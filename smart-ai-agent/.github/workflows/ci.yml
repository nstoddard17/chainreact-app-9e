name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check TypeScript
      run: npx tsc --noEmit

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run tests
      run: npm run test:coverage
      env:
        # Mock AI provider API keys for testing
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key' }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'test-key' }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'test-key' }}
        MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY || 'test-key' }}
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == 18
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.json

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      
    - name: Run dependency vulnerability scan
      uses: auditjs/auditjs-action@v0.1.0
      with:
        allowlist: .auditjs.json

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Create package
      run: npm pack
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: npm-package
        path: '*.tgz'
        
    - name: Upload dist folder
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: npm-package
        
    - name: Install package locally
      run: |
        npm install *.tgz
        
    - name: Run integration tests
      run: |
        cat > integration-test.js << 'EOF'
        const SmartAIAgent = require('@chainreact/smart-ai-agent');
        
        async function testIntegration() {
          try {
            // Test basic import
            console.log('✓ Package import successful');
            
            // Test agent creation
            const agent = new SmartAIAgent({
              aiProvider: {
                provider: 'openai',
                model: 'gpt-3.5-turbo',
                apiKey: 'test-key'
              },
              maxRetries: 1,
              enableSafety: true,
              enableFallback: true,
              enableTokenManagement: true,
              debugMode: true
            });
            console.log('✓ Agent creation successful');
            
            // Test health check
            const health = await agent.healthCheck();
            console.log('✓ Health check completed:', health.status);
            
            console.log('Integration test passed!');
          } catch (error) {
            console.error('Integration test failed:', error);
            process.exit(1);
          }
        }
        
        testIntegration();
        EOF
        
        node integration-test.js

  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [test, build, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://npm.pkg.github.com'
        scope: '@chainreact'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Publish to GitHub Packages
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: always()
    
    steps:
    - name: Check job results
      run: |
        echo "Lint: ${{ needs.lint.result }}"
        echo "Test: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Build: ${{ needs.build.result }}"
        
        if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.security.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
          echo "❌ Pipeline failed"
          exit 1
        else
          echo "✅ Pipeline succeeded"
        fi

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run performance tests
      run: |
        cat > performance-test.js << 'EOF'
        const SmartAIAgent = require('./dist/index.js').default;
        const { performance } = require('perf_hooks');
        
        async function runPerformanceTest() {
          const agent = new SmartAIAgent({
            aiProvider: {
              provider: 'openai',
              model: 'gpt-3.5-turbo',
              apiKey: 'test-key'
            },
            maxRetries: 1,
            enableSafety: true,
            enableFallback: true,
            enableTokenManagement: true,
            debugMode: false
          });
          
          const iterations = 100;
          const times = [];
          
          console.log(`Running ${iterations} iterations...`);
          
          for (let i = 0; i < iterations; i++) {
            const start = performance.now();
            
            try {
              // Simulate field classification
              const classifier = agent.fieldClassifier;
              const result = classifier.classifyFields([
                { name: 'email', type: 'email', required: true },
                { name: 'name', type: 'string', required: true },
                { name: 'age', type: 'number', required: false }
              ]);
              
              const end = performance.now();
              times.push(end - start);
            } catch (error) {
              // Expected for test environment
            }
          }
          
          const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
          const maxTime = Math.max(...times);
          const minTime = Math.min(...times);
          
          console.log(`Performance Results:`);
          console.log(`Average time: ${avgTime.toFixed(2)}ms`);
          console.log(`Max time: ${maxTime.toFixed(2)}ms`);
          console.log(`Min time: ${minTime.toFixed(2)}ms`);
          
          // Performance thresholds
          if (avgTime > 50) {
            console.warn(`⚠️ Average time (${avgTime.toFixed(2)}ms) exceeds threshold (50ms)`);
          } else {
            console.log(`✅ Performance test passed`);
          }
        }
        
        runPerformanceTest().catch(console.error);
        EOF
        
        node performance-test.js