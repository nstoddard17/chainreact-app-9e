name: Test Smart AI Agent

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Build project
      run: npm run build
      
    - name: Run tests
      run: npm run test:ci
      env:
        # Test API keys (mock/test values)
        OPENAI_API_KEY: test-key-openai
        ANTHROPIC_API_KEY: test-key-anthropic
        GOOGLE_API_KEY: test-key-google
        MISTRAL_API_KEY: test-key-mistral
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          dist/
          test-results.json
        retention-days: 30

  coverage:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build and test with coverage
      run: |
        npm run build
        npm run test:ci
      env:
        OPENAI_API_KEY: test-key-openai
        ANTHROPIC_API_KEY: test-key-anthropic
        GOOGLE_API_KEY: test-key-google
        MISTRAL_API_KEY: test-key-mistral
        
    - name: Generate coverage report
      run: |
        echo "# Test Coverage Report" > coverage-report.md
        echo "This would contain detailed coverage information" >> coverage-report.md
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('coverage-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverage
          });

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        
    - name: Check for secrets
      run: |
        # Basic check for potential secrets in code
        if grep -r "sk-" src/ || grep -r "api[_-]key" src/ || grep -r "secret" src/; then
          echo "Potential secrets found in source code"
          exit 1
        fi
        echo "No obvious secrets found"

  publish-dry-run:
    runs-on: ubuntu-latest
    needs: [test, coverage, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for publishing
      run: npm run build
      
    - name: Dry run publish
      run: npm publish --dry-run