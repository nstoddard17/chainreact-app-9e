import { OutputField } from "./types"

/**
 * Fallback output schemas for action nodes that did not explicitly define
 * their outputs during the provider refactor. These definitions restore the
 * variable picker experience in configuration modals.
 */
export const OUTPUT_SCHEMA_FALLBACKS: Record<string, OutputField[]> = {
  custom_script: [
    {
      name: "result",
      label: "Script Result",
      type: "object",
      description: "Object returned from the custom JavaScript snippet.",
    },
    {
      name: "logs",
      label: "Console Logs",
      type: "array",
      description: "Any console.log output captured during execution.",
    },
    {
      name: "durationMs",
      label: "Execution Time (ms)",
      type: "number",
      description: "How long the script ran in milliseconds.",
    },
  ],
  loop: [
    {
      name: "iterations",
      label: "Items Processed",
      type: "number",
      description: "Total number of elements the loop iterated over.",
    },
    {
      name: "results",
      label: "Iteration Results",
      type: "array",
      description: "Array containing the output from each loop iteration.",
    },
    {
      name: "lastItem",
      label: "Last Item",
      type: "object",
      description: "The final item processed by the loop.",
    },
  ],
  mailchimp_action_add_subscriber: [
    {
      name: "id",
      label: "Subscriber ID",
      type: "string",
      description: "Mailchimp unique identifier for the contact.",
    },
    {
      name: "email",
      label: "Email Address",
      type: "string",
      description: "Email that was added to the audience.",
    },
    {
      name: "status",
      label: "Subscription Status",
      type: "string",
      description: "Contact status after the operation (subscribed, pending, etc.).",
    },
    {
      name: "listId",
      label: "Audience ID",
      type: "string",
      description: "Audience/list where the subscriber was added.",
    },
    {
      name: "tags",
      label: "Tags",
      type: "array",
      description: "Tags applied to the subscriber.",
    },
  ],
  mailchimp_action_update_subscriber: [
    {
      name: "id",
      label: "Subscriber ID",
      type: "string",
      description: "Mailchimp unique identifier for the contact.",
    },
    {
      name: "email",
      label: "Email Address",
      type: "string",
      description: "Subscriber email address after the update.",
    },
    {
      name: "status",
      label: "Subscription Status",
      type: "string",
      description: "Updated subscription status.",
    },
    {
      name: "updatedFields",
      label: "Updated Fields",
      type: "object",
      description: "Key/value map of the fields that were changed.",
    },
  ],
  mailchimp_action_remove_subscriber: [
    {
      name: "email",
      label: "Email Address",
      type: "string",
      description: "Subscriber removed from the audience.",
    },
    {
      name: "listId",
      label: "Audience ID",
      type: "string",
      description: "Audience the subscriber was removed from.",
    },
    {
      name: "removed",
      label: "Removed",
      type: "boolean",
      description: "Whether the subscriber was removed successfully.",
    },
  ],
  mailchimp_action_add_tag: [
    {
      name: "email",
      label: "Email Address",
      type: "string",
      description: "Subscriber that was tagged.",
    },
    {
      name: "tagId",
      label: "Tag ID",
      type: "string",
      description: "Mailchimp tag identifier.",
    },
    {
      name: "tagName",
      label: "Tag Name",
      type: "string",
      description: "Name of the tag applied to the subscriber.",
    },
    {
      name: "applied",
      label: "Tag Applied",
      type: "boolean",
      description: "Whether the tag was added successfully.",
    },
  ],
  mailchimp_action_remove_tag: [
    {
      name: "email",
      label: "Email Address",
      type: "string",
      description: "Subscriber that was untagged.",
    },
    {
      name: "tagId",
      label: "Tag ID",
      type: "string",
      description: "Mailchimp tag identifier.",
    },
    {
      name: "tagName",
      label: "Tag Name",
      type: "string",
      description: "Name of the tag removed from the subscriber.",
    },
    {
      name: "removed",
      label: "Tag Removed",
      type: "boolean",
      description: "Whether the tag was removed successfully.",
    },
  ],
  mailchimp_action_send_campaign: [
    {
      name: "campaignId",
      label: "Campaign ID",
      type: "string",
      description: "Identifier of the campaign that was sent.",
    },
    {
      name: "status",
      label: "Send Status",
      type: "string",
      description: "Delivery status reported by Mailchimp.",
    },
    {
      name: "scheduleTime",
      label: "Scheduled Time",
      type: "string",
      description: "Scheduled send time in ISO 8601 format (if applicable).",
    },
    {
      name: "emailsSent",
      label: "Emails Sent",
      type: "number",
      description: "Number of recipients that received the campaign.",
    },
  ],
  mailchimp_action_create_campaign: [
    {
      name: "campaignId",
      label: "Campaign ID",
      type: "string",
      description: "Identifier of the campaign that was created.",
    },
    {
      name: "webId",
      label: "Web ID",
      type: "number",
      description: "Mailchimp web ID for viewing the campaign online.",
    },
    {
      name: "status",
      label: "Campaign Status",
      type: "string",
      description: "Status of the campaign (draft, paused, etc.).",
    },
    {
      name: "archiveUrl",
      label: "Archive URL",
      type: "string",
      description: "URL where the campaign can be viewed.",
    },
  ],
  "google-drive:create_file": [
    {
      name: "fileId",
      label: "File ID",
      type: "string",
      description: "Drive identifier of the uploaded file.",
    },
    {
      name: "name",
      label: "File Name",
      type: "string",
      description: "Name of the uploaded file.",
    },
    {
      name: "mimeType",
      label: "MIME Type",
      type: "string",
      description: "Detected MIME type of the file.",
    },
    {
      name: "webViewLink",
      label: "Web View Link",
      type: "string",
      description: "Link for viewing the file in the browser.",
    },
    {
      name: "webContentLink",
      label: "Download Link",
      type: "string",
      description: "Direct download link for the file content.",
    },
    {
      name: "size",
      label: "File Size",
      type: "number",
      description: "Size of the file in bytes.",
    },
  ],
  google_docs_action_create_document: [
    {
      name: "documentId",
      label: "Document ID",
      type: "string",
      description: "Google Docs identifier for the newly created document.",
    },
    {
      name: "title",
      label: "Document Title",
      type: "string",
      description: "Title that was set for the document.",
    },
    {
      name: "documentUrl",
      label: "Document URL",
      type: "string",
      description: "Link to open the document in Google Docs.",
    },
    {
      name: "created",
      label: "Created",
      type: "boolean",
      description: "Whether the document creation succeeded.",
    },
  ],
  google_docs_action_update_document: [
    {
      name: "documentId",
      label: "Document ID",
      type: "string",
      description: "ID of the document that was updated.",
    },
    {
      name: "updated",
      label: "Updated",
      type: "boolean",
      description: "Whether the update operation succeeded.",
    },
    {
      name: "revisionId",
      label: "Revision ID",
      type: "string",
      description: "Latest revision identifier after the update.",
    },
    {
      name: "changedSegments",
      label: "Changed Segments",
      type: "array",
      description: "Array describing the document segments that changed.",
    },
  ],
  github_action_create_repository: [
    {
      name: "repositoryId",
      label: "Repository ID",
      type: "number",
      description: "Numeric GitHub ID for the repository.",
    },
    {
      name: "name",
      label: "Repository Name",
      type: "string",
      description: "Full name of the repository.",
    },
    {
      name: "htmlUrl",
      label: "Repository URL",
      type: "string",
      description: "URL to view the repository on GitHub.",
    },
    {
      name: "defaultBranch",
      label: "Default Branch",
      type: "string",
      description: "Default branch configured for the repository.",
    },
    {
      name: "visibility",
      label: "Visibility",
      type: "string",
      description: "Whether the repository is public or private.",
    },
  ],
  github_action_create_pull_request: [
    {
      name: "pullRequestNumber",
      label: "Pull Request Number",
      type: "number",
      description: "Numeric identifier of the pull request.",
    },
    {
      name: "title",
      label: "Title",
      type: "string",
      description: "Title given to the pull request.",
    },
    {
      name: "htmlUrl",
      label: "Pull Request URL",
      type: "string",
      description: "Link to the pull request on GitHub.",
    },
    {
      name: "state",
      label: "State",
      type: "string",
      description: "Current state of the pull request (open, closed, merged).",
    },
    {
      name: "mergeable",
      label: "Mergeable",
      type: "boolean",
      description: "Whether GitHub reports the pull request as mergeable.",
    },
  ],
  github_action_create_gist: [
    {
      name: "gistId",
      label: "Gist ID",
      type: "string",
      description: "Identifier of the created gist.",
    },
    {
      name: "htmlUrl",
      label: "Gist URL",
      type: "string",
      description: "Public URL for the gist.",
    },
    {
      name: "files",
      label: "Files",
      type: "object",
      description: "Map describing the files contained within the gist.",
    },
    {
      name: "public",
      label: "Public",
      type: "boolean",
      description: "Whether the gist was created as public.",
    },
  ],
  github_action_add_comment: [
    {
      name: "commentId",
      label: "Comment ID",
      type: "number",
      description: "Identifier of the comment that was created.",
    },
    {
      name: "htmlUrl",
      label: "Comment URL",
      type: "string",
      description: "Link to view the comment on GitHub.",
    },
    {
      name: "body",
      label: "Comment Body",
      type: "string",
      description: "Content of the comment.",
    },
    {
      name: "issueNumber",
      label: "Issue or PR Number",
      type: "number",
      description: "Issue or pull request number where the comment was added.",
    },
  ],
  airtable_action_update_record: [
    {
      name: "recordId",
      label: "Record ID",
      type: "string",
      description: "Identifier of the Airtable record that was updated.",
    },
    {
      name: "fields",
      label: "Updated Fields",
      type: "object",
      description: "Key/value map of the fields after the update.",
    },
    {
      name: "updated",
      label: "Updated",
      type: "boolean",
      description: "Whether the update succeeded.",
    },
    {
      name: "createdTime",
      label: "Created Time",
      type: "string",
      description: "Original record creation time (ISO 8601).",
    },
  ],
  airtable_action_list_records: [
    {
      name: "records",
      label: "Records",
      type: "array",
      description: "Array of Airtable records that matched the query.",
    },
    {
      name: "totalRecords",
      label: "Total Records",
      type: "number",
      description: "Total number of records returned in this batch.",
    },
    {
      name: "offset",
      label: "Offset",
      type: "string",
      description: "Pagination cursor to fetch additional records.",
    },
  ],
  stripe_action_create_customer: [
    {
      name: "customerId",
      label: "Customer ID",
      type: "string",
      description: "Stripe identifier for the created customer.",
    },
    {
      name: "email",
      label: "Email",
      type: "string",
      description: "Customer email address.",
    },
    {
      name: "name",
      label: "Name",
      type: "string",
      description: "Customer name stored in Stripe.",
    },
    {
      name: "created",
      label: "Created Time",
      type: "string",
      description: "Timestamp when the customer was created.",
    },
    {
      name: "status",
      label: "Status",
      type: "string",
      description: "Lifecycle status for the customer (active, archived, etc.).",
    },
  ],
  stripe_action_create_payment_intent: [
    {
      name: "paymentIntentId",
      label: "Payment Intent ID",
      type: "string",
      description: "Identifier for the created payment intent.",
    },
    {
      name: "status",
      label: "Status",
      type: "string",
      description: "Processing status reported by Stripe.",
    },
    {
      name: "clientSecret",
      label: "Client Secret",
      type: "string",
      description: "Client secret used to complete the payment on the client.",
    },
    {
      name: "amount",
      label: "Amount",
      type: "number",
      description: "Payment amount in the smallest currency unit.",
    },
    {
      name: "currency",
      label: "Currency",
      type: "string",
      description: "Currency code (USD, EUR, etc.).",
    },
  ],
  stripe_action_create_invoice: [
    {
      name: "invoiceId",
      label: "Invoice ID",
      type: "string",
      description: "Identifier for the created invoice.",
    },
    {
      name: "status",
      label: "Status",
      type: "string",
      description: "Invoice status (draft, open, paid, etc.).",
    },
    {
      name: "hostedInvoiceUrl",
      label: "Hosted Invoice URL",
      type: "string",
      description: "Public URL for the hosted invoice page.",
    },
    {
      name: "amountDue",
      label: "Amount Due",
      type: "number",
      description: "Total amount due in the smallest currency unit.",
    },
    {
      name: "currency",
      label: "Currency",
      type: "string",
      description: "Currency code for the invoice.",
    },
  ],
  stripe_action_create_subscription: [
    {
      name: "subscriptionId",
      label: "Subscription ID",
      type: "string",
      description: "Identifier for the created subscription.",
    },
    {
      name: "status",
      label: "Status",
      type: "string",
      description: "Subscription status (trialing, active, past_due, etc.).",
    },
    {
      name: "currentPeriodEnd",
      label: "Current Period End",
      type: "string",
      description: "ISO timestamp when the current billing period ends.",
    },
    {
      name: "customerId",
      label: "Customer ID",
      type: "string",
      description: "Stripe customer associated with the subscription.",
    },
    {
      name: "planId",
      label: "Plan ID",
      type: "string",
      description: "Billing plan applied to the subscription.",
    },
  ],
  trello_action_create_board: [
    {
      name: "boardId",
      label: "Board ID",
      type: "string",
      description: "Identifier of the board that was created.",
    },
    {
      name: "name",
      label: "Board Name",
      type: "string",
      description: "Name of the new Trello board.",
    },
    {
      name: "url",
      label: "Board URL",
      type: "string",
      description: "Direct URL to open the board in Trello.",
    },
    {
      name: "shortUrl",
      label: "Short URL",
      type: "string",
      description: "Compact URL for sharing the board.",
    },
    {
      name: "prefs",
      label: "Board Preferences",
      type: "object",
      description: "Board preference settings returned by Trello.",
    },
  ],
  trello_action_create_list: [
    {
      name: "listId",
      label: "List ID",
      type: "string",
      description: "Identifier of the list that was created.",
    },
    {
      name: "name",
      label: "List Name",
      type: "string",
      description: "Name of the newly created list.",
    },
    {
      name: "boardId",
      label: "Board ID",
      type: "string",
      description: "Board containing the list.",
    },
    {
      name: "pos",
      label: "List Position",
      type: "number",
      description: "Relative position of the list on the board.",
    },
    {
      name: "closed",
      label: "Archived",
      type: "boolean",
      description: "Whether the list is archived.",
    },
  ],
  trello_action_move_card: [
    {
      name: "cardId",
      label: "Card ID",
      type: "string",
      description: "Identifier of the card that was moved.",
    },
    {
      name: "listId",
      label: "Target List ID",
      type: "string",
      description: "Identifier of the destination list.",
    },
    {
      name: "boardId",
      label: "Board ID",
      type: "string",
      description: "Board containing the card after the move.",
    },
    {
      name: "position",
      label: "New Position",
      type: "string",
      description: "Relative placement of the card in the target list.",
    },
    {
      name: "movedAt",
      label: "Moved At",
      type: "string",
      description: "Timestamp when the move was completed.",
    },
  ],
  teams_action_send_chat_message: [
    {
      name: "messageId",
      label: "Message ID",
      type: "string",
      description: "Identifier of the Microsoft Teams message.",
    },
    {
      name: "chatId",
      label: "Chat ID",
      type: "string",
      description: "Chat or channel identifier where the message was posted.",
    },
    {
      name: "content",
      label: "Content",
      type: "string",
      description: "Body of the message that was sent.",
    },
    {
      name: "timestamp",
      label: "Sent At",
      type: "string",
      description: "Timestamp when Teams accepted the message.",
    },
  ],
  teams_action_add_member_to_team: [
    {
      name: "teamId",
      label: "Team ID",
      type: "string",
      description: "Identifier of the Microsoft Team that was updated.",
    },
    {
      name: "userId",
      label: "User ID",
      type: "string",
      description: "Azure AD identifier for the member that was added.",
    },
    {
      name: "membershipId",
      label: "Membership ID",
      type: "string",
      description: "Identifier of the membership resource created in Graph.",
    },
    {
      name: "added",
      label: "Added",
      type: "boolean",
      description: "Whether the user was successfully added to the team.",
    },
  ],
  teams_action_schedule_meeting: [
    {
      name: "eventId",
      label: "Event ID",
      type: "string",
      description: "Identifier for the scheduled meeting event.",
    },
    {
      name: "subject",
      label: "Subject",
      type: "string",
      description: "Subject or title of the meeting.",
    },
    {
      name: "start",
      label: "Start",
      type: "string",
      description: "Start time for the meeting (ISO 8601).",
    },
    {
      name: "end",
      label: "End",
      type: "string",
      description: "End time for the meeting (ISO 8601).",
    },
    {
      name: "joinUrl",
      label: "Join URL",
      type: "string",
      description: "Teams meeting join link.",
    },
  ],
  teams_action_send_adaptive_card: [
    {
      name: "activityId",
      label: "Activity ID",
      type: "string",
      description: "Identifier returned for the posted adaptive card.",
    },
    {
      name: "conversationId",
      label: "Conversation ID",
      type: "string",
      description: "Conversation identifier where the card was posted.",
    },
    {
      name: "timestamp",
      label: "Sent At",
      type: "string",
      description: "Timestamp when the card was delivered.",
    },
  ],
  teams_action_create_team: [
    {
      name: "teamId",
      label: "Team ID",
      type: "string",
      description: "Identifier of the newly created Microsoft Team.",
    },
    {
      name: "displayName",
      label: "Team Name",
      type: "string",
      description: "Display name configured for the team.",
    },
    {
      name: "description",
      label: "Description",
      type: "string",
      description: "Description that was saved for the team.",
    },
    {
      name: "webUrl",
      label: "Team Web URL",
      type: "string",
      description: "Link to open the team in Microsoft Teams.",
    },
  ],
  slack_action_create_channel: [
    {
      name: "channelId",
      label: "Channel ID",
      type: "string",
      description: "Slack identifier for the created channel.",
    },
    {
      name: "name",
      label: "Channel Name",
      type: "string",
      description: "Name of the new Slack channel.",
    },
    {
      name: "isPrivate",
      label: "Private",
      type: "boolean",
      description: "Whether the channel is private.",
    },
    {
      name: "createdAt",
      label: "Created At",
      type: "string",
      description: "Timestamp when the channel was created.",
    },
  ],
  discord_action_edit_message: [
    {
      name: "messageId",
      label: "Message ID",
      type: "string",
      description: "Identifier of the Discord message that was edited.",
    },
    {
      name: "channelId",
      label: "Channel ID",
      type: "string",
      description: "Channel containing the edited message.",
    },
    {
      name: "content",
      label: "Updated Content",
      type: "string",
      description: "Content of the message after editing.",
    },
    {
      name: "editedAt",
      label: "Edited At",
      type: "string",
      description: "Timestamp when Discord saved the edit.",
    },
  ],
  discord_action_delete_message: [
    {
      name: "channelId",
      label: "Channel ID",
      type: "string",
      description: "Channel from which the message(s) were deleted.",
    },
    {
      name: "messageIds",
      label: "Deleted Message IDs",
      type: "array",
      description: "Array of message identifiers that were removed.",
    },
    {
      name: "deletedCount",
      label: "Deleted Count",
      type: "number",
      description: "Number of messages deleted by the action.",
    },
  ],
  discord_action_fetch_messages: [
    {
      name: "channelId",
      label: "Channel ID",
      type: "string",
      description: "Channel from which messages were fetched.",
    },
    {
      name: "messages",
      label: "Messages",
      type: "array",
      description: "Array containing the fetched Discord messages.",
    },
    {
      name: "fetched",
      label: "Fetched Count",
      type: "number",
      description: "Total number of messages returned.",
    },
  ],
  twitter_action_post_tweet: [
    {
      name: "tweetId",
      label: "Tweet ID",
      type: "string",
      description: "Identifier of the tweet that was published.",
    },
    {
      name: "text",
      label: "Tweet Text",
      type: "string",
      description: "Full text of the tweet.",
    },
    {
      name: "permalink",
      label: "Tweet URL",
      type: "string",
      description: "Link to view the tweet on X (Twitter).",
    },
    {
      name: "createdAt",
      label: "Created At",
      type: "string",
      description: "Timestamp when the tweet was created.",
    },
  ],
  twitter_action_reply_tweet: [
    {
      name: "tweetId",
      label: "Reply Tweet ID",
      type: "string",
      description: "Identifier of the reply tweet that was created.",
    },
    {
      name: "inReplyToStatusId",
      label: "Parent Tweet ID",
      type: "string",
      description: "Identifier of the tweet that was replied to.",
    },
    {
      name: "text",
      label: "Reply Text",
      type: "string",
      description: "Content of the reply tweet.",
    },
    {
      name: "permalink",
      label: "Reply URL",
      type: "string",
      description: "Link to view the reply tweet.",
    },
  ],
  twitter_action_retweet: [
    {
      name: "tweetId",
      label: "Tweet ID",
      type: "string",
      description: "Identifier of the tweet that was retweeted.",
    },
    {
      name: "retweeted",
      label: "Retweeted",
      type: "boolean",
      description: "Whether the tweet was successfully retweeted.",
    },
    {
      name: "userId",
      label: "User ID",
      type: "string",
      description: "ID of the account performing the retweet.",
    },
  ],
  twitter_action_unretweet: [
    {
      name: "tweetId",
      label: "Tweet ID",
      type: "string",
      description: "Identifier of the tweet whose retweet was removed.",
    },
    {
      name: "unretweeted",
      label: "Retweet Reversed",
      type: "boolean",
      description: "Whether the retweet was successfully undone.",
    },
    {
      name: "userId",
      label: "User ID",
      type: "string",
      description: "ID of the account that originally retweeted the tweet.",
    },
  ],
  twitter_action_like_tweet: [
    {
      name: "tweetId",
      label: "Tweet ID",
      type: "string",
      description: "Identifier of the tweet that was liked.",
    },
    {
      name: "liked",
      label: "Liked",
      type: "boolean",
      description: "Whether the like action succeeded.",
    },
    {
      name: "userId",
      label: "User ID",
      type: "string",
      description: "ID of the account that liked the tweet.",
    },
  ],
  twitter_action_unlike_tweet: [
    {
      name: "tweetId",
      label: "Tweet ID",
      type: "string",
      description: "Identifier of the tweet that was unliked.",
    },
    {
      name: "unliked",
      label: "Unliked",
      type: "boolean",
      description: "Whether the like was successfully removed.",
    },
    {
      name: "userId",
      label: "User ID",
      type: "string",
      description: "ID of the account that removed the like.",
    },
  ],
  twitter_action_send_dm: [
    {
      name: "dmId",
      label: "Message ID",
      type: "string",
      description: "Identifier of the direct message that was sent.",
    },
    {
      name: "recipientId",
      label: "Recipient ID",
      type: "string",
      description: "Identifier of the receiver of the direct message.",
    },
    {
      name: "text",
      label: "Message Text",
      type: "string",
      description: "Body of the direct message.",
    },
    {
      name: "createdAt",
      label: "Sent At",
      type: "string",
      description: "Timestamp when the message was sent.",
    },
  ],
  twitter_action_follow_user: [
    {
      name: "targetUserId",
      label: "Target User ID",
      type: "string",
      description: "ID of the account that was followed.",
    },
    {
      name: "following",
      label: "Following",
      type: "boolean",
      description: "Whether the follow relationship is active.",
    },
    {
      name: "followerCount",
      label: "Follower Count",
      type: "number",
      description: "Follower total reported after the follow action.",
    },
  ],
  twitter_action_unfollow_user: [
    {
      name: "targetUserId",
      label: "Target User ID",
      type: "string",
      description: "ID of the account that was unfollowed.",
    },
    {
      name: "following",
      label: "Still Following",
      type: "boolean",
      description: "Whether the account remains followed after the request.",
    },
    {
      name: "unfollowed",
      label: "Unfollowed",
      type: "boolean",
      description: "Whether the unfollow action succeeded.",
    },
  ],
  twitter_action_search_tweets: [
    {
      name: "query",
      label: "Search Query",
      type: "string",
      description: "Query string that was executed.",
    },
    {
      name: "tweets",
      label: "Tweets",
      type: "array",
      description: "Array of tweets matching the search query.",
    },
    {
      name: "count",
      label: "Match Count",
      type: "number",
      description: "Number of tweets returned by the search.",
    },
  ],
  twitter_action_get_user_timeline: [
    {
      name: "userId",
      label: "User ID",
      type: "string",
      description: "Identifier of the account whose timeline was fetched.",
    },
    {
      name: "tweets",
      label: "Tweets",
      type: "array",
      description: "Array of tweets from the user's timeline.",
    },
    {
      name: "count",
      label: "Tweet Count",
      type: "number",
      description: "Number of tweets returned in the timeline.",
    },
  ],
  twitter_action_get_mentions: [
    {
      name: "userId",
      label: "User ID",
      type: "string",
      description: "Account whose mentions timeline was fetched.",
    },
    {
      name: "mentions",
      label: "Mentions",
      type: "array",
      description: "Array of mention tweets referencing the account.",
    },
    {
      name: "count",
      label: "Mention Count",
      type: "number",
      description: "Number of mentions returned.",
    },
  ],
  "microsoft-outlook_action_create_calendar_event": [
    {
      name: "eventId",
      label: "Event ID",
      type: "string",
      description: "Identifier for the Outlook calendar event.",
    },
    {
      name: "subject",
      label: "Subject",
      type: "string",
      description: "Subject line of the calendar event.",
    },
    {
      name: "start",
      label: "Start",
      type: "string",
      description: "Event start time in ISO 8601 format.",
    },
    {
      name: "end",
      label: "End",
      type: "string",
      description: "Event end time in ISO 8601 format.",
    },
    {
      name: "onlineMeetingUrl",
      label: "Join URL",
      type: "string",
      description: "Microsoft Teams or online meeting join link.",
    },
  ],
  hubspot_action_create_contact: [
    {
      name: "contactId",
      label: "Contact ID",
      type: "string",
      description: "HubSpot identifier for the contact.",
    },
    {
      name: "email",
      label: "Email",
      type: "string",
      description: "Primary email address stored on the contact.",
    },
    {
      name: "properties",
      label: "Properties",
      type: "object",
      description: "Full property set returned by HubSpot.",
    },
    {
      name: "portalId",
      label: "Portal ID",
      type: "string",
      description: "HubSpot portal associated with the record.",
    },
  ],
  hubspot_action_create_company: [
    {
      name: "companyId",
      label: "Company ID",
      type: "string",
      description: "HubSpot identifier for the company.",
    },
    {
      name: "domain",
      label: "Domain",
      type: "string",
      description: "Company domain stored in HubSpot.",
    },
    {
      name: "properties",
      label: "Properties",
      type: "object",
      description: "Full property set returned by HubSpot.",
    },
  ],
  hubspot_action_create_deal: [
    {
      name: "dealId",
      label: "Deal ID",
      type: "string",
      description: "HubSpot identifier for the deal.",
    },
    {
      name: "amount",
      label: "Amount",
      type: "number",
      description: "Deal amount stored in HubSpot.",
    },
    {
      name: "stage",
      label: "Stage",
      type: "string",
      description: "Pipeline stage assigned to the deal.",
    },
    {
      name: "pipeline",
      label: "Pipeline",
      type: "string",
      description: "Pipeline that the deal belongs to.",
    },
  ],
  hubspot_action_add_contact_to_list: [
    {
      name: "contactId",
      label: "Contact ID",
      type: "string",
      description: "Identifier of the contact that was added.",
    },
    {
      name: "listId",
      label: "List ID",
      type: "string",
      description: "HubSpot list that received the contact.",
    },
    {
      name: "added",
      label: "Added",
      type: "boolean",
      description: "Whether the contact was successfully added.",
    },
  ],
  hubspot_action_update_deal: [
    {
      name: "dealId",
      label: "Deal ID",
      type: "string",
      description: "Identifier of the deal that was updated.",
    },
    {
      name: "updatedFields",
      label: "Updated Fields",
      type: "object",
      description: "Key/value map of fields that changed on the deal.",
    },
    {
      name: "stage",
      label: "Stage",
      type: "string",
      description: "Current stage of the deal after the update.",
    },
  ],
  hubspot_action_create_object: [
    {
      name: "objectId",
      label: "Object ID",
      type: "string",
      description: "Identifier for the created HubSpot object.",
    },
    {
      name: "objectType",
      label: "Object Type",
      type: "string",
      description: "API name of the custom object that was created.",
    },
    {
      name: "properties",
      label: "Properties",
      type: "object",
      description: "Properties returned for the created object.",
    },
  ],
  hubspot_action_update_object: [
    {
      name: "objectId",
      label: "Object ID",
      type: "string",
      description: "Identifier of the object that was updated.",
    },
    {
      name: "objectType",
      label: "Object Type",
      type: "string",
      description: "HubSpot object type that was updated.",
    },
    {
      name: "updatedFields",
      label: "Updated Fields",
      type: "object",
      description: "Key/value map of the fields that changed.",
    },
  ],
  hubspot_action_upsert_object: [
    {
      name: "objectId",
      label: "Object ID",
      type: "string",
      description: "Identifier of the object created or updated.",
    },
    {
      name: "objectType",
      label: "Object Type",
      type: "string",
      description: "HubSpot object type involved in the upsert.",
    },
    {
      name: "upserted",
      label: "Upserted",
      type: "boolean",
      description: "Whether the object was newly created (true) or updated.",
    },
    {
      name: "properties",
      label: "Properties",
      type: "object",
      description: "Full property payload returned by HubSpot.",
    },
  ],
  hubspot_action_refresh_properties: [
    {
      name: "objectType",
      label: "Object Type",
      type: "string",
      description: "Object type whose properties were refreshed.",
    },
    {
      name: "refreshed",
      label: "Refreshed",
      type: "boolean",
      description: "Whether the property cache was refreshed successfully.",
    },
    {
      name: "timestamp",
      label: "Refreshed At",
      type: "string",
      description: "Time the refresh completed (ISO 8601).",
    },
  ],
  hubspot_action_create_contact_enhanced: [
    {
      name: "contactId",
      label: "Contact ID",
      type: "string",
      description: "HubSpot identifier for the created contact.",
    },
    {
      name: "email",
      label: "Email",
      type: "string",
      description: "Primary email saved for the contact.",
    },
    {
      name: "properties",
      label: "Properties",
      type: "object",
      description: "All properties stored on the contact.",
    },
    {
      name: "enrichment",
      label: "Enrichment Data",
      type: "object",
      description: "Additional enrichment metadata applied during creation.",
    },
  ],
  hubspot_action_create_contact_fully_dynamic: [
    {
      name: "contactId",
      label: "Contact ID",
      type: "string",
      description: "Identifier for the contact created with dynamic fields.",
    },
    {
      name: "email",
      label: "Email",
      type: "string",
      description: "Email address stored on the contact.",
    },
    {
      name: "properties",
      label: "All Properties",
      type: "object",
      description: "Complete property map returned by HubSpot.",
    },
  ],
  facebook_action_create_post: [
    {
      name: "postId",
      label: "Post ID",
      type: "string",
      description: "Identifier of the Facebook post that was created.",
    },
    {
      name: "permalinkUrl",
      label: "Permalink URL",
      type: "string",
      description: "URL to view the post on Facebook.",
    },
    {
      name: "createdTime",
      label: "Created Time",
      type: "string",
      description: "Timestamp when the post was published.",
    },
    {
      name: "message",
      label: "Message",
      type: "string",
      description: "Body text used in the post.",
    },
  ],
  facebook_action_get_page_insights: [
    {
      name: "pageId",
      label: "Page ID",
      type: "string",
      description: "Facebook page whose insights were fetched.",
    },
    {
      name: "period",
      label: "Reporting Period",
      type: "string",
      description: "Time window used for the insights request.",
    },
    {
      name: "metrics",
      label: "Metrics",
      type: "array",
      description: "Array of metric objects returned by Facebook.",
    },
    {
      name: "summary",
      label: "Summary",
      type: "object",
      description: "Summary data calculated over the requested period.",
    },
  ],
  facebook_action_send_message: [
    {
      name: "conversationId",
      label: "Conversation ID",
      type: "string",
      description: "Conversation where the message was delivered.",
    },
    {
      name: "messageId",
      label: "Message ID",
      type: "string",
      description: "Identifier of the message that was sent.",
    },
    {
      name: "recipientId",
      label: "Recipient ID",
      type: "string",
      description: "Facebook ID of the recipient.",
    },
    {
      name: "createdTime",
      label: "Sent Time",
      type: "string",
      description: "Timestamp when Facebook accepted the message.",
    },
  ],
  facebook_action_comment_on_post: [
    {
      name: "commentId",
      label: "Comment ID",
      type: "string",
      description: "Identifier of the comment that was added.",
    },
    {
      name: "postId",
      label: "Post ID",
      type: "string",
      description: "Identifier of the post that received the comment.",
    },
    {
      name: "message",
      label: "Comment Message",
      type: "string",
      description: "Content of the comment.",
    },
    {
      name: "createdTime",
      label: "Created Time",
      type: "string",
      description: "Timestamp when the comment was published.",
    },
  ],
  onedrive_action_upload_file: [
    {
      name: "fileId",
      label: "File ID",
      type: "string",
      description: "OneDrive identifier for the uploaded file.",
    },
    {
      name: "name",
      label: "File Name",
      type: "string",
      description: "Name of the uploaded file.",
    },
    {
      name: "webUrl",
      label: "Web URL",
      type: "string",
      description: "URL to open the file in OneDrive.",
    },
    {
      name: "size",
      label: "File Size",
      type: "number",
      description: "Size of the file in bytes.",
    },
    {
      name: "driveId",
      label: "Drive ID",
      type: "string",
      description: "Identifier of the drive that now stores the file.",
    },
  ],
  "microsoft-onenote_action_create_page": [
    {
      name: "pageId",
      label: "Page ID",
      type: "string",
      description: "Identifier of the OneNote page that was created.",
    },
    {
      name: "title",
      label: "Title",
      type: "string",
      description: "Title of the new OneNote page.",
    },
    {
      name: "pageUrl",
      label: "Page URL",
      type: "string",
      description: "URL for viewing the page in OneNote.",
    },
    {
      name: "createdTime",
      label: "Created Time",
      type: "string",
      description: "Timestamp when the page was created.",
    },
  ],
  "microsoft-onenote_action_create_notebook": [
    {
      name: "notebookId",
      label: "Notebook ID",
      type: "string",
      description: "Identifier of the notebook that was created.",
    },
    {
      name: "displayName",
      label: "Notebook Name",
      type: "string",
      description: "Display name of the new notebook.",
    },
    {
      name: "webUrl",
      label: "Notebook URL",
      type: "string",
      description: "URL to open the notebook in OneNote.",
    },
  ],
  "microsoft-onenote_action_create_section": [
    {
      name: "sectionId",
      label: "Section ID",
      type: "string",
      description: "Identifier of the section that was created.",
    },
    {
      name: "displayName",
      label: "Section Name",
      type: "string",
      description: "Display name of the section.",
    },
    {
      name: "webUrl",
      label: "Section URL",
      type: "string",
      description: "URL for accessing the section in OneNote.",
    },
    {
      name: "notebookId",
      label: "Notebook ID",
      type: "string",
      description: "Notebook that contains the newly created section.",
    },
  ],
  "microsoft-onenote_action_update_page": [
    {
      name: "pageId",
      label: "Page ID",
      type: "string",
      description: "Identifier of the page that was updated.",
    },
    {
      name: "updated",
      label: "Updated",
      type: "boolean",
      description: "Whether the page update succeeded.",
    },
    {
      name: "lastModifiedTime",
      label: "Last Modified Time",
      type: "string",
      description: "Timestamp of the latest page modification.",
    },
  ],
  "microsoft-onenote_action_get_page_content": [
    {
      name: "pageId",
      label: "Page ID",
      type: "string",
      description: "Identifier of the page whose content was fetched.",
    },
    {
      name: "title",
      label: "Title",
      type: "string",
      description: "Title of the OneNote page.",
    },
    {
      name: "contentHtml",
      label: "Content HTML",
      type: "string",
      description: "HTML body of the page.",
    },
    {
      name: "resources",
      label: "Resources",
      type: "array",
      description: "Collection of resource URLs referenced in the page.",
    },
  ],
  "microsoft-onenote_action_get_pages": [
    {
      name: "pages",
      label: "Pages",
      type: "array",
      description: "Array of OneNote pages returned by the query.",
    },
    {
      name: "count",
      label: "Page Count",
      type: "number",
      description: "Number of pages included in the response.",
    },
    {
      name: "nextLink",
      label: "Next Link",
      type: "string",
      description: "Pagination link to fetch additional pages.",
    },
  ],
  "microsoft-onenote_action_copy_page": [
    {
      name: "sourcePageId",
      label: "Source Page ID",
      type: "string",
      description: "Identifier of the page that was copied.",
    },
    {
      name: "newPageId",
      label: "New Page ID",
      type: "string",
      description: "Identifier of the newly created copy.",
    },
    {
      name: "newPageUrl",
      label: "New Page URL",
      type: "string",
      description: "URL where the copied page can be accessed.",
    },
  ],
  "microsoft-onenote_action_search": [
    {
      name: "query",
      label: "Search Query",
      type: "string",
      description: "Query string that was executed against OneNote.",
    },
    {
      name: "results",
      label: "Results",
      type: "array",
      description: "Array of search hits returned by OneNote.",
    },
    {
      name: "count",
      label: "Result Count",
      type: "number",
      description: "Number of matching pages or sections.",
    },
  ],
  "microsoft-onenote_action_delete_page": [
    {
      name: "pageId",
      label: "Page ID",
      type: "string",
      description: "Identifier of the page that was deleted.",
    },
    {
      name: "deleted",
      label: "Deleted",
      type: "boolean",
      description: "Whether the deletion succeeded.",
    },
    {
      name: "status",
      label: "Status",
      type: "string",
      description: "Status text returned by OneNote.",
    },
  ],
  dropbox_action_upload_file: [
    {
      name: "fileId",
      label: "File ID",
      type: "string",
      description: "Dropbox identifier for the uploaded file.",
    },
    {
      name: "name",
      label: "File Name",
      type: "string",
      description: "Name of the uploaded file.",
    },
    {
      name: "pathLower",
      label: "Path",
      type: "string",
      description: "Lowercase path where the file was stored.",
    },
    {
      name: "size",
      label: "File Size",
      type: "number",
      description: "Size of the file in bytes.",
    },
    {
      name: "contentHash",
      label: "Content Hash",
      type: "string",
      description: "Dropbox content hash for the uploaded file.",
    },
  ],
  manychat_action_send_message: [
    {
      name: "subscriberId",
      label: "Subscriber ID",
      type: "string",
      description: "Identifier of the subscriber who received the message.",
    },
    {
      name: "messageId",
      label: "Message ID",
      type: "string",
      description: "ManyChat identifier for the message that was sent.",
    },
    {
      name: "status",
      label: "Status",
      type: "string",
      description: "Delivery status reported by ManyChat.",
    },
    {
      name: "sentAt",
      label: "Sent At",
      type: "string",
      description: "Timestamp when the message was delivered.",
    },
  ],
  manychat_action_tag_subscriber: [
    {
      name: "subscriberId",
      label: "Subscriber ID",
      type: "string",
      description: "Identifier of the subscriber that was tagged.",
    },
    {
      name: "tagId",
      label: "Tag ID",
      type: "string",
      description: "Identifier of the tag applied in ManyChat.",
    },
    {
      name: "tagName",
      label: "Tag Name",
      type: "string",
      description: "Human-readable name of the applied tag.",
    },
    {
      name: "tagged",
      label: "Tagged",
      type: "boolean",
      description: "Whether the tag operation succeeded.",
    },
  ],
  gumroad_action_create_product: [
    {
      name: "productId",
      label: "Product ID",
      type: "string",
      description: "Identifier of the Gumroad product that was created.",
    },
    {
      name: "name",
      label: "Product Name",
      type: "string",
      description: "Name given to the product.",
    },
    {
      name: "permalink",
      label: "Permalink",
      type: "string",
      description: "Permalink slug for the product.",
    },
    {
      name: "url",
      label: "Product URL",
      type: "string",
      description: "Public URL where the product can be purchased.",
    },
    {
      name: "published",
      label: "Published",
      type: "boolean",
      description: "Whether the product is live and purchasable.",
    },
  ],
  gumroad_action_get_sales_analytics: [
    {
      name: "productId",
      label: "Product ID",
      type: "string",
      description: "Identifier of the product analyzed.",
    },
    {
      name: "sales",
      label: "Sales",
      type: "number",
      description: "Number of sales in the requested timeframe.",
    },
    {
      name: "revenue",
      label: "Revenue",
      type: "number",
      description: "Total revenue generated in the requested timeframe.",
    },
    {
      name: "currency",
      label: "Currency",
      type: "string",
      description: "Currency code for the reported revenue.",
    },
    {
      name: "timeframe",
      label: "Timeframe",
      type: "string",
      description: "Reporting window used for the analytics query.",
    },
  ],
}
