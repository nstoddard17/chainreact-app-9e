/**
 * Smart AI Agent Action Handler
 * 
 * This handler executes the Smart AI Agent that automatically analyzes
 * downstream actions and fills all compatible fields based on context.
 */

import { smartAIAgent, SmartAIAgentConfig } from '../smartAIAgent';

export interface SmartAIAgentParams {
  userId: string;
  config: {
    targetAction?: string;
    tone?: 'professional' | 'casual' | 'friendly' | 'formal' | 'conversational';
    length?: 'concise' | 'detailed' | 'comprehensive';
    includeEmojis?: boolean;
    customInstructions?: string;
  };
  input: any;
  workflowContext?: {
    nodes: any[];
    edges: any[];
    previousResults: Record<string, any>;
  };
}

export interface SmartAIAgentResult {
  success: boolean;
  generatedFields?: Record<string, any>;
  fieldsCount?: number;
  targetActionType?: string;
  analysisContext?: any;
  message?: string;
  error?: string;
}

/**
 * Execute Smart AI Agent
 */
export async function executeSmartAIAgent(params: SmartAIAgentParams): Promise<SmartAIAgentResult> {
  try {
    const { userId, config, input, workflowContext } = params;
    
    console.log("ü§ñ Smart AI Agent execution started:");
    console.log("üìã Config:", JSON.stringify(config, null, 2));
    console.log("üì• Input data:", JSON.stringify(input, null, 2));
    
    // Validate required configuration
    if (!config.targetAction) {
      return {
        success: false,
        error: "Target action is required. Please select which action should be automatically filled."
      };
    }

    // Extract target action type from target action ID
    // The targetAction config should contain the action type
    const targetActionType = config.targetAction;
    
    // Build upstream context from input and workflow data
    const upstreamContext = {
      triggerData: input,
      previousActionResults: workflowContext?.previousResults || {},
      workflowMetadata: {
        name: "Current Workflow",
        description: "Auto-generated by Smart AI Agent"
      }
    };

    // Prepare Smart AI Agent configuration
    const smartConfig: SmartAIAgentConfig = {
      targetActionId: config.targetAction,
      targetActionType: targetActionType,
      upstreamContext: upstreamContext,
      userPreferences: {
        tone: config.tone || 'professional',
        length: config.length || 'concise',
        includeEmojis: config.includeEmojis || false,
        language: 'en'
      }
    };

    // Execute Smart AI Agent
    const generatedFields = await smartAIAgent.executeSmartGeneration(smartConfig);
    
    // Count generated fields
    const fieldsCount = Object.keys(generatedFields).length;
    
    // Build analysis context for output
    const analysisContext = {
      triggerType: determineTriggerType(input),
      fieldsAnalyzed: fieldsCount,
      contentLength: JSON.stringify(input).length,
      tone: config.tone,
      customInstructions: config.customInstructions || null
    };

    const result: SmartAIAgentResult = {
      success: true,
      generatedFields,
      fieldsCount,
      targetActionType,
      analysisContext,
      message: `Successfully generated ${fieldsCount} fields for ${targetActionType} action`
    };

    console.log("‚úÖ Smart AI Agent completed successfully");
    console.log("üìä Generated fields:", generatedFields);
    
    return result;

  } catch (error: any) {
    console.error("‚ùå Smart AI Agent execution failed:", error);
    return {
      success: false,
      error: error.message || "Smart AI Agent execution failed"
    };
  }
}

/**
 * Determine trigger type from input data
 */
function determineTriggerType(input: any): string {
  if (!input || typeof input !== 'object') return 'manual';
  
  if (input.message) return 'discord_message';
  if (input.subject || input.from || input.to) return 'email';
  if (input.text || input.channel) return 'slack_message';
  if (input.event) return 'calendar_event';
  if (input.form) return 'form_submission';
  
  return 'webhook';
}

/**
 * Get available target actions for the Smart AI Agent
 * This would be called by the UI to populate the targetAction dropdown
 */
export function getAvailableTargetActions(workflowNodes: any[]): Array<{value: string, label: string}> {
  // Filter workflow nodes to only include actions (not triggers)
  const actionNodes = workflowNodes.filter(node => 
    node.data && !node.data.isTrigger && node.data.type !== 'smart_ai_agent'
  );
  
  return actionNodes.map(node => ({
    value: node.data.type,
    label: node.data.title || node.data.type
  }));
}

/**
 * Utility to check if an action type supports Smart AI Agent
 */
export function supportsSmartGeneration(actionType: string): boolean {
  // List of action types that have user-fillable fields suitable for AI generation
  const supportedActions = [
    // Email actions
    'gmail_action_send_email',
    'outlook_action_send_email', 
    'resend_action_send_email',
    
    // Communication
    'slack_action_send_message',
    'discord_action_send_message',
    'teams_action_send_message',
    
    // Social media
    'twitter_action_post',
    'linkedin_action_share_post',
    'facebook_action_post',
    
    // Productivity
    'notion_action_create_page',
    'trello_action_create_card',
    'asana_action_create_task',
    'airtable_action_create_record',
    
    // Developer tools
    'github_action_create_issue',
    'gitlab_action_create_issue',
    'github_action_create_pull_request',
    
    // E-commerce
    'shopify_action_create_product',
    'stripe_action_create_customer',
    
    // File storage
    'google_drive_action_upload_file',
    'dropbox_action_upload_file',
    'onedrive_action_upload_file'
  ];
  
  return supportedActions.includes(actionType);
}

/**
 * Get field preview for Smart AI Agent
 * Shows what fields would be generated without actually executing
 */
export async function previewSmartGeneration(
  actionType: string, 
  contextSample: any
): Promise<{fields: string[], estimated: boolean}> {
  
  try {
    const dummyConfig: SmartAIAgentConfig = {
      targetActionId: 'preview',
      targetActionType: actionType,
      upstreamContext: {
        triggerData: contextSample,
        previousActionResults: {},
        workflowMetadata: { name: 'Preview' }
      }
    };
    
    // Get the action schema to determine fillable fields
    const mockAgent = smartAIAgent;
    const actionSchema = (mockAgent as any).getActionSchema(actionType);
    
    if (!actionSchema) {
      return { fields: [], estimated: false };
    }
    
    const fillableFields = (mockAgent as any).identifyFillableFields(actionSchema);
    const fieldNames = fillableFields.map((field: any) => field.label || field.name);
    
    return {
      fields: fieldNames,
      estimated: true
    };
    
  } catch (error) {
    console.error('Preview generation failed:', error);
    return { fields: [], estimated: false };
  }
}