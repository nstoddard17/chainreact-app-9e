=== Log Session Started: 2025-10-26T03:13:29.806Z ===
Node Version: v23.7.0
Platform: darwin
Working Directory: /Users/nathanielstoddard/chainreact-app/chainreact-app-9e
================================================================================

[2025-10-26T03:13:29.806Z] [INFO   ] File logging initialized
[2025-10-26T03:13:29.806Z] [INFO   ] Log file: /Users/nathanielstoddard/chainreact-app/chainreact-app-9e/logs/workflow_2025-10-25_22-13-29.log
[2025-10-26T03:13:29.809Z] [INFO   ] üìÅ File logging enabled
[2025-10-26T03:13:29.809Z] [INFO   ] üìù Logs will be written to: /Users/nathanielstoddard/chainreact-app/chainreact-app-9e/logs/workflow_2025-10-25_22-13-29.log
[2025-10-26T03:13:29.809Z] [INFO   ] üí° To view logs in real-time: tail -f /Users/nathanielstoddard/chainreact-app/chainreact-app-9e/logs/workflow_2025-10-25_22-13-29.log
[2025-10-26T03:13:29.809Z] [INFO   ] üí° To view all logs: cat /Users/nathanielstoddard/chainreact-app/chainreact-app-9e/logs/workflow_2025-10-25_22-13-29.log
[2025-10-26T03:13:29.809Z] [INFO   ] üí° To share logs: Copy the file at /Users/nathanielstoddard/chainreact-app/chainreact-app-9e/logs/workflow_2025-10-25_22-13-29.log
[2025-10-26T03:13:29.810Z] [INFO   ] --------------------------------------------------------------------------------
[2025-10-26T03:13:29.810Z] [DEBUG  ] üìÅ File logging system initialized
[2025-10-26T03:13:29.821Z] [INFO   ]  [32m[1m‚úì[22m[39m Ready in 3.2s
[2025-10-26T03:13:29.965Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /middleware in 139ms (233 modules)
[2025-10-26T03:13:30.316Z] [INFO   ] 2025-10-26T03:13:30.316Z [DEBUG] [Middleware] Username check: {"path":"/workflows/ai-agent","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12881722916}
[2025-10-26T03:13:30.812Z] [INFO   ] 2025-10-26T03:13:30.812Z [DEBUG] ü§ñ Discord bot configured, initializing gateway connection in background...
[2025-10-26T03:13:32.804Z] [INFO   ] 2025-10-26T03:13:32.804Z [DEBUG] Initializing Discord Gateway connection (singleton)...
[2025-10-26T03:13:32.804Z] [INFO   ] 2025-10-26T03:13:32.804Z [DEBUG] üîë Discord bot token loaded
[2025-10-26T03:13:32.812Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /workflows/ai-agent ...
[2025-10-26T03:13:33.047Z] [INFO   ] 2025-10-26T03:13:33.047Z [DEBUG] Discord Gateway initialization complete
[2025-10-26T03:13:33.048Z] [INFO   ] 2025-10-26T03:13:33.048Z [DEBUG] ‚úÖ Discord bot gateway connection initialized
[2025-10-26T03:13:33.407Z] [INFO   ] 2025-10-26T03:13:33.407Z [DEBUG] Discord Gateway WebSocket connection established
[2025-10-26T03:13:33.407Z] [INFO   ] 2025-10-26T03:13:33.407Z [DEBUG] üîë Sending identify with intents: {"GUILDS":true,"GUILD_MEMBERS":true,"GUILD_INVITES":true,"GUILD_MESSAGES":true,"MESSAGE_CONTENT":true,"intentsValue":33347}
[2025-10-26T03:13:33.608Z] [INFO   ] 2025-10-26T03:13:33.608Z [DEBUG] üéâ Discord bot ready! {"sessionId":"58e6d35be156e049d9274079bd2bf4ec","username":"ChainReact-Bot","userId":"1378595955212812308","guildCount":2}
[2025-10-26T03:13:33.608Z] [INFO   ] 2025-10-26T03:13:33.608Z [DEBUG] üìã Initializing invite cache...
[2025-10-26T03:13:33.609Z] [INFO   ] 2025-10-26T03:13:33.609Z [DEBUG] üì° Discord event received: GUILD_CREATE
[2025-10-26T03:13:33.850Z] [INFO   ] 2025-10-26T03:13:33.850Z [DEBUG] üì° Discord event received: GUILD_CREATE
[2025-10-26T03:13:34.432Z] [INFO   ] 2025-10-26T03:13:34.432Z [DEBUG] ‚úÖ Cached 3 invites for guild 1378950884045623406
[2025-10-26T03:13:36.491Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /workflows/ai-agent in 6.2s (3725 modules)
[2025-10-26T03:13:36.880Z] [INFO   ] 2025-10-26T03:13:36.880Z [DEBUG] üíß [AUTH] Rehydrating auth state from storage {"hasState":true,"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:13:36.880Z"}
[2025-10-26T03:13:36.883Z] [INFO   ] 2025-10-26T03:13:36.883Z [DEBUG] üíß [AUTH] State hydrated and reset {"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:13:36.883Z"}
[2025-10-26T03:13:36.883Z] [INFO   ] 2025-10-26T03:13:36.883Z [DEBUG] ‚è≠Ô∏è [AUTH] Skipping initialization {"hasState":true,"alreadyInitialized":false,"isClient":false,"timestamp":"2025-10-26T03:13:36.883Z"}
[2025-10-26T03:13:37.220Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 717ms (597 modules)
[2025-10-26T03:13:37.403Z] [INFO   ] 2025-10-26T03:13:37.402Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:14:12.571Z] [INFO   ] 2025-10-26T03:14:12.571Z [DEBUG] [Middleware] Username check: {"path":"/workflows/ai-agent","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12881765171}
[2025-10-26T03:14:12.896Z] [INFO   ] 2025-10-26T03:14:12.896Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:14:13.631Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /api/presence/count ...
[2025-10-26T03:14:14.403Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/presence/count in 1272ms (3732 modules)
[2025-10-26T03:14:16.536Z] [INFO   ] 2025-10-26T03:14:16.535Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/d55592a7-fa95-498f-a2b7-281490064a13","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12881769136}
[2025-10-26T03:14:17.150Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /workflows/builder/[id] ...
[2025-10-26T03:14:19.760Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/integrations in 3.2s (5925 modules)
[2025-10-26T03:14:19.898Z] [INFO   ] 2025-10-26T03:14:19.898Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:14:19.898Z","headers":{"referer":"check-console"}}
[2025-10-26T03:14:20.045Z] [INFO   ] 2025-10-26T03:14:20.045Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:14:20.132Z] [INFO   ] 2025-10-26T03:14:20.132Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:14:20.731Z] [INFO   ] 2025-10-26T03:14:20.730Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:14:22.158Z] [INFO   ] 2025-10-26T03:14:22.157Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/d55592a7-fa95-498f-a2b7-281490064a13","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12881774758}
[2025-10-26T03:14:22.382Z] [INFO   ] 2025-10-26T03:14:22.382Z [DEBUG] üíß [AUTH] Rehydrating auth state from storage {"hasState":true,"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:14:22.382Z"}
[2025-10-26T03:14:22.394Z] [INFO   ] 2025-10-26T03:14:22.394Z [DEBUG] üíß [AUTH] State hydrated and reset {"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:14:22.394Z"}
[2025-10-26T03:14:22.394Z] [INFO   ] 2025-10-26T03:14:22.394Z [DEBUG] ‚è≠Ô∏è [AUTH] Skipping initialization {"hasState":true,"alreadyInitialized":false,"isClient":false,"timestamp":"2025-10-26T03:14:22.394Z"}
[2025-10-26T03:14:22.601Z] [INFO   ] 2025-10-26T03:14:22.600Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:14:23.035Z] [INFO   ] 2025-10-26T03:14:23.035Z [INFO] [NewWorkflowBuilderContent] URL params: {"aiChat":"true","hasInitialPrompt":true,"initialPrompt":"When I get an email send it to slack"}
[2025-10-26T03:14:23.611Z] [INFO   ] 2025-10-26T03:14:23.611Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:14:23.611Z","headers":{"referer":"check-console"}}
[2025-10-26T03:14:23.685Z] [INFO   ] 2025-10-26T03:14:23.685Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:14:23.784Z] [INFO   ] 2025-10-26T03:14:23.784Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:14:24.217Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /api/collaboration/join ...
[2025-10-26T03:14:24.435Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/collaboration/join in 719ms (5928 modules)
[2025-10-26T03:14:24.995Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/ai/analyze-request in 362ms (5930 modules)
[2025-10-26T03:14:25.197Z] [INFO   ] 2025-10-26T03:14:25.197Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"When I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:14:25.388Z] [ERROR  ] 2025-10-26T03:14:25.388Z [ERROR] [ANALYZE] OpenAI API error: {"status":429,"error":"{\n    \"error\": {\n        \"message\": \"You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.\",\n        \"type\": \"insufficient_quota\",\n        \"param\": null,\n        \"code\": \"insufficient_quota\"\n    }\n}\n"}
[2025-10-26T03:14:25.389Z] [ERROR  ] 2025-10-26T03:14:25.389Z [ERROR] [ANALYZE] Analysis failed: {}
[2025-10-26T03:14:55.666Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /api/collaboration/collaborators ...
[2025-10-26T03:14:55.672Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/collaboration/collaborators in 533ms (5932 modules)
[2025-10-26T03:21:51.187Z] [INFO   ] 2025-10-26T03:21:51.187Z [DEBUG] [Middleware] Username check: {"path":"/workflows/ai-agent","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12882223788}
[2025-10-26T03:21:51.474Z] [INFO   ] 2025-10-26T03:21:51.474Z [DEBUG] üíß [AUTH] Rehydrating auth state from storage {"hasState":true,"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:21:51.474Z"}
[2025-10-26T03:21:51.477Z] [INFO   ] 2025-10-26T03:21:51.477Z [DEBUG] üíß [AUTH] State hydrated and reset {"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:21:51.477Z"}
[2025-10-26T03:21:51.477Z] [INFO   ] 2025-10-26T03:21:51.477Z [DEBUG] ‚è≠Ô∏è [AUTH] Skipping initialization {"hasState":true,"alreadyInitialized":false,"isClient":false,"timestamp":"2025-10-26T03:21:51.477Z"}
[2025-10-26T03:21:51.792Z] [INFO   ] 2025-10-26T03:21:51.792Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:21:55.766Z] [INFO   ] 2025-10-26T03:21:55.766Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:21:55.766Z","headers":{"referer":"check-console"}}
[2025-10-26T03:21:55.843Z] [INFO   ] 2025-10-26T03:21:55.843Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:21:55.925Z] [INFO   ] 2025-10-26T03:21:55.925Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:23:14.159Z] [INFO   ] 2025-10-26T03:23:14.159Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/05453ac1-e3a5-4229-9308-81e7a2d28a6e","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12882306760}
[2025-10-26T03:23:14.656Z] [INFO   ] 2025-10-26T03:23:14.656Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:23:16.084Z] [INFO   ] 2025-10-26T03:23:16.084Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:23:16.084Z","headers":{"referer":"check-console"}}
[2025-10-26T03:23:16.233Z] [INFO   ] 2025-10-26T03:23:16.233Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:23:16.351Z] [INFO   ] 2025-10-26T03:23:16.351Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:23:17.307Z] [INFO   ] 2025-10-26T03:23:17.307Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"when I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:23:19.680Z] [INFO   ] 2025-10-26T03:23:19.679Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T03:23:20.470Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /api/integrations/gmail/senders ...
[2025-10-26T03:23:21.869Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/integrations/gmail/senders in 1982ms (5930 modules)
[2025-10-26T03:23:22.509Z] [INFO   ] 2025-10-26T03:23:22.509Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:23:22.862Z] [INFO   ] 2025-10-26T03:23:22.861Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:23:22.881Z] [INFO   ] 2025-10-26T03:23:22.880Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:23:23.507Z] [INFO   ] 2025-10-26T03:23:23.507Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:23:28.127Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /api/ai/stream-workflow ...
[2025-10-26T03:23:28.514Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/ai/stream-workflow in 904ms (2465 modules)
[2025-10-26T03:23:30.727Z] [INFO   ] [Prerequisite Check] Required apps: [ 'gmail', 'slack' ]
[2025-10-26T03:23:30.730Z] [INFO   ] [Prerequisite Check] Connected integrations: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'google-drive',
  'dropbox',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T03:23:30.730Z] [INFO   ] [Prerequisite Check] Normalized connected: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'google-drive',
  'dropbox',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T03:23:30.730Z] [INFO   ] [Prerequisite Check] Checking gmail (normalized: gmail): CONNECTED
[2025-10-26T03:23:30.730Z] [INFO   ] [Prerequisite Check] Checking slack (normalized: slack): CONNECTED
[2025-10-26T03:23:46.447Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/collaboration/collaborators in 307ms (4280 modules)
[2025-10-26T03:24:14.611Z] [INFO   ] [STREAM] Phase 2: Starting node creation, plan: {
  understanding: 'The user wants to automatically send received emails to a Slack channel.',
  nodes: [
  {
  type: 'gmail_trigger_new_email',
  title: 'Trigger on New Email',
  description: 'This node triggers the workflow whenever a new email is received in the user\'s Gmail account.',
  reasoning: 'This is the starting point of the workflow, as it detects the arrival of new emails.'
},
  {
  type: 'slack_action_send_message',
  title: 'Send Message to Slack',
  description: 'This node sends a message to a specified Slack channel.',
  reasoning: 'This action is necessary to relay the content of the received email to the Slack channel.'
}
],
  connections: 'The workflow starts with the \'gmail_trigger_new_email\' node, which triggers the \'slack_action_send_message\' node to send the email content to Slack.'
}
[2025-10-26T03:24:14.612Z] [INFO   ] [STREAM] Plan nodes: [
  {
  type: 'gmail_trigger_new_email',
  title: 'Trigger on New Email',
  description: 'This node triggers the workflow whenever a new email is received in the user\'s Gmail account.',
  reasoning: 'This is the starting point of the workflow, as it detects the arrival of new emails.'
},
  {
  type: 'slack_action_send_message',
  title: 'Send Message to Slack',
  description: 'This node sends a message to a specified Slack channel.',
  reasoning: 'This action is necessary to relay the content of the received email to the Slack channel.'
}
]
[2025-10-26T03:24:14.613Z] [INFO   ] [POSITION] Node 0 : {
  viewport: { width: 909, height: 1211, zoom: 0.75, chatPanelWidth: 1000 },
  effectiveViewportWidth: 2545.3333333333335,
  builderViewportWidth: 1212,
  visibleHeight: 1614.6666666666667,
  availableWidth: 1132,
  nodesPerRow: 1,
  row: 0,
  col: 0,
  position: { x: 381, y: 80 }
}
[2025-10-26T03:24:14.714Z] [INFO   ] [POSITION] Node 1 : {
  viewport: { width: 909, height: 1211, zoom: 0.75, chatPanelWidth: 1000 },
  effectiveViewportWidth: 2545.3333333333335,
  builderViewportWidth: 1212,
  visibleHeight: 1614.6666666666667,
  availableWidth: 1132,
  nodesPerRow: 1,
  row: 1,
  col: 0,
  position: { x: 381, y: 480 }
}
[2025-10-26T03:24:15.668Z] [INFO   ] [STREAM] Preparing Trigger on New Email (node-1761449054612-0)
[2025-10-26T03:24:16.469Z] [INFO   ] [STREAM] Starting configuration for Trigger on New Email (node-1761449054612-0)
[2025-10-26T03:24:16.971Z] [INFO   ] [STREAM] Calling generateNodeConfig for Trigger on New Email...
[2025-10-26T03:24:16.973Z] [INFO   ] [generateNodeConfig] Starting for node: Trigger on New Email
[2025-10-26T03:24:16.973Z] [INFO   ] [generateNodeConfig] nodeComponent: { type: 'gmail_trigger_new_email', providerId: 'gmail' }
[2025-10-26T03:24:16.973Z] [INFO   ] [generateNodeConfig] clarifications received: {}
[2025-10-26T03:24:16.974Z] [INFO   ] [generateNodeConfig] Extracted clarificationEntries: []
[2025-10-26T03:24:16.974Z] [INFO   ] [generateNodeConfig] messageTemplate: undefined
[2025-10-26T03:24:16.974Z] [INFO   ] [generateNodeConfig] Final clarificationContext: NONE
[2025-10-26T03:24:16.974Z] [INFO   ] [generateNodeConfig] Sending prompt to AI...
[2025-10-26T03:24:22.798Z] [INFO   ] [generateNodeConfig] AI returned result: {
  "success": true,
  "config": {
    "trigger": {
      "type": "gmail_trigger_new_email",
      "user_id": "{{previous_node.user_id}}",
      "label_ids": [
        "INBOX"
      ],
      "include_spam_trash": false,
      "search_query": "",
      "fetch_body": true,
      "fetch_attachments": false
    }
  },
  "reasoning": "The configuration uses the user's ID from a previous node to ensure the trigger is set for the correct Gmail account. The label_ids field is set to 'INBOX' to only trigger on new emails received in the inbox. The include_spam_trash option is set to false to avoid triggering on emails in spam or trash. The search_query is left empty for a broad trigger on all new emails. Fetching the body is enabled to allow further processing of the email content, while attachments are not fetched by default to reduce unnecessary data handling unless specifically needed."
}
[2025-10-26T03:24:22.799Z] [INFO   ] [generateNodeConfig] Config from AI: {
  "trigger": {
    "type": "gmail_trigger_new_email",
    "user_id": "{{previous_node.user_id}}",
    "label_ids": [
      "INBOX"
    ],
    "include_spam_trash": false,
    "search_query": "",
    "fetch_body": true,
    "fetch_attachments": false
  }
}
[2025-10-26T03:24:22.799Z] [INFO   ] [generateNodeConfig] Final config after force-apply: {}
[2025-10-26T03:24:22.799Z] [INFO   ] [STREAM] generateNodeConfig completed in 5827ms for Trigger on New Email
[2025-10-26T03:24:22.800Z] [INFO   ] [STREAM] Config result: {
  success: true,
  hasConfig: true,
  configKeys: [],
  finalConfigKeys: [],
  fallbackFields: []
}
[2025-10-26T03:24:22.800Z] [INFO   ] [STREAM] Configuring 0 fields for Trigger on New Email: 
[2025-10-26T03:24:22.800Z] [INFO   ] [STREAM] No config for trigger, adding default
[2025-10-26T03:24:23.303Z] [INFO   ] [STREAM] Skipping test for trigger Trigger on New Email
[2025-10-26T03:24:24.806Z] [INFO   ] [STREAM] Trigger complete, continuing to next node (loop iteration 0 of 1)
[2025-10-26T03:24:25.109Z] [INFO   ] [STREAM] Completed node 1 of 2, moving to next iteration
[2025-10-26T03:24:25.109Z] [INFO   ] [STREAM] Preparing Send Message to Slack (node-1761449054714-1)
[2025-10-26T03:24:25.910Z] [INFO   ] [STREAM] Starting configuration for Send Message to Slack (node-1761449054714-1)
[2025-10-26T03:24:26.413Z] [INFO   ] [STREAM] Calling generateNodeConfig for Send Message to Slack...
[2025-10-26T03:24:26.413Z] [INFO   ] [generateNodeConfig] Starting for node: Send Message to Slack
[2025-10-26T03:24:26.414Z] [INFO   ] [generateNodeConfig] nodeComponent: { type: 'slack_action_send_message', providerId: 'slack' }
[2025-10-26T03:24:26.414Z] [INFO   ] [generateNodeConfig] clarifications received: {}
[2025-10-26T03:24:26.414Z] [INFO   ] [generateNodeConfig] Extracted clarificationEntries: []
[2025-10-26T03:24:26.414Z] [INFO   ] [generateNodeConfig] messageTemplate: undefined
[2025-10-26T03:24:26.414Z] [INFO   ] [generateNodeConfig] Final clarificationContext: NONE
[2025-10-26T03:24:26.414Z] [INFO   ] [generateNodeConfig] Sending prompt to AI...
[2025-10-26T03:24:56.421Z] [ERROR  ] 2025-10-26T03:24:56.420Z [ERROR] AI call failed: {}
[2025-10-26T03:24:56.421Z] [INFO   ] [generateNodeConfig] AI returned result: {
  "success": false,
  "error": "AI API request timed out after 30 seconds"
}
[2025-10-26T03:24:56.421Z] [INFO   ] [generateNodeConfig] Config from AI: undefined
[2025-10-26T03:24:56.421Z] [INFO   ] [generateNodeConfig] No config from AI, initializing empty config
[2025-10-26T03:24:56.421Z] [INFO   ] [generateNodeConfig] Final config after force-apply: {}
[2025-10-26T03:24:56.421Z] [INFO   ] [STREAM] generateNodeConfig completed in 30008ms for Send Message to Slack
[2025-10-26T03:24:56.423Z] [INFO   ] [STREAM] Config result: {
  success: false,
  hasConfig: true,
  configKeys: [],
  finalConfigKeys: [ 'channel', 'message' ],
  fallbackFields: [ 'channel', 'message' ]
}
[2025-10-26T03:24:56.423Z] [INFO   ] [STREAM] Configuring 2 fields for Send Message to Slack: channel, message
[2025-10-26T03:24:56.423Z] [INFO   ] [STREAM] Setting field channel = Select a channel for Send Message to Slack
[2025-10-26T03:24:56.725Z] [INFO   ] [STREAM] Setting field message =  for Send Message to Slack
[2025-10-26T03:25:11.319Z] [INFO   ] [STREAM] Completed node 2 of 2, moving to next iteration
[2025-10-26T03:25:11.319Z] [INFO   ] [STREAM] All nodes configured and tested, sending workflow_complete event
[2025-10-26T03:26:53.260Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /api/presence/count ...
[2025-10-26T03:26:53.288Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/presence/count in 831ms (4270 modules)
[2025-10-26T03:31:12.482Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 1739ms (5935 modules)
[2025-10-26T03:31:12.759Z] [INFO   ] 2025-10-26T03:31:12.759Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/05453ac1-e3a5-4229-9308-81e7a2d28a6e","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12882785359}
[2025-10-26T03:31:13.082Z] [INFO   ] 2025-10-26T03:31:13.082Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:31:13.919Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /api/collaboration/leave ...
[2025-10-26T03:31:14.276Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/collaboration/leave in 956ms (5923 modules)
[2025-10-26T03:31:14.582Z] [WARN   ]  [33m[1m‚ö†[22m[39m Fast Refresh had to perform a full reload due to a runtime error.
[2025-10-26T03:31:14.913Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/integrations in 287ms (4272 modules)
[2025-10-26T03:31:14.998Z] [INFO   ] 2025-10-26T03:31:14.998Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:31:14.997Z","headers":{"referer":"check-console"}}
[2025-10-26T03:31:15.021Z] [INFO   ] 2025-10-26T03:31:15.021Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/05453ac1-e3a5-4229-9308-81e7a2d28a6e","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12882787622}
[2025-10-26T03:31:15.267Z] [INFO   ] 2025-10-26T03:31:15.266Z [DEBUG] üíß [AUTH] Rehydrating auth state from storage {"hasState":true,"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:31:15.266Z"}
[2025-10-26T03:31:15.279Z] [INFO   ] 2025-10-26T03:31:15.279Z [DEBUG] üíß [AUTH] State hydrated and reset {"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:31:15.279Z"}
[2025-10-26T03:31:15.280Z] [INFO   ] 2025-10-26T03:31:15.280Z [DEBUG] ‚è≠Ô∏è [AUTH] Skipping initialization {"hasState":true,"alreadyInitialized":false,"isClient":false,"timestamp":"2025-10-26T03:31:15.280Z"}
[2025-10-26T03:31:15.340Z] [INFO   ] 2025-10-26T03:31:15.340Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:31:15.470Z] [INFO   ] 2025-10-26T03:31:15.470Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:31:15.577Z] [INFO   ] 2025-10-26T03:31:15.576Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:31:15.928Z] [INFO   ] 2025-10-26T03:31:15.928Z [INFO] [NewWorkflowBuilderContent] URL params: {"aiChat":"true","hasInitialPrompt":true,"initialPrompt":"when I get an email send it to slack"}
[2025-10-26T03:31:16.873Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /api/collaboration/join ...
[2025-10-26T03:31:17.221Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/collaboration/join in 894ms (4274 modules)
[2025-10-26T03:31:17.751Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled (4279 modules)
[2025-10-26T03:31:17.911Z] [INFO   ] 2025-10-26T03:31:17.910Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:31:17.910Z","headers":{"referer":"check-console"}}
[2025-10-26T03:31:18.002Z] [INFO   ] 2025-10-26T03:31:18.001Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:31:18.120Z] [INFO   ] 2025-10-26T03:31:18.120Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:31:19.249Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/ai/analyze-request in 354ms (4281 modules)
[2025-10-26T03:31:19.468Z] [INFO   ] 2025-10-26T03:31:19.468Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"when I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:31:22.649Z] [INFO   ] 2025-10-26T03:31:22.649Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T03:31:23.225Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/integrations/gmail/senders in 1019ms (5948 modules)
[2025-10-26T03:31:24.039Z] [INFO   ] 2025-10-26T03:31:24.039Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/05453ac1-e3a5-4229-9308-81e7a2d28a6e","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12882796640}
[2025-10-26T03:31:24.590Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 0ms (4286 modules)
[2025-10-26T03:31:25.115Z] [INFO   ] 2025-10-26T03:31:25.115Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:31:25.608Z] [INFO   ] 2025-10-26T03:31:25.608Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:31:25.847Z] [INFO   ] 2025-10-26T03:31:25.847Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:31:25.977Z] [INFO   ] 2025-10-26T03:31:25.977Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:31:26.492Z] [INFO   ] 2025-10-26T03:31:26.492Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:32:18.608Z] [WARN   ]  [33m[1m‚ö†[22m[39m Fast Refresh had to perform a full reload due to a runtime error.
[2025-10-26T03:32:18.690Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 1215ms (1900 modules)
[2025-10-26T03:32:19.117Z] [INFO   ] 2025-10-26T03:32:19.117Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/05453ac1-e3a5-4229-9308-81e7a2d28a6e","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12882851718}
[2025-10-26T03:32:19.283Z] [INFO   ] 2025-10-26T03:32:19.283Z [DEBUG] üíß [AUTH] Rehydrating auth state from storage {"hasState":true,"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:32:19.283Z"}
[2025-10-26T03:32:19.297Z] [INFO   ] 2025-10-26T03:32:19.296Z [DEBUG] üíß [AUTH] State hydrated and reset {"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:32:19.296Z"}
[2025-10-26T03:32:19.297Z] [INFO   ] 2025-10-26T03:32:19.297Z [DEBUG] ‚è≠Ô∏è [AUTH] Skipping initialization {"hasState":true,"alreadyInitialized":false,"isClient":false,"timestamp":"2025-10-26T03:32:19.297Z"}
[2025-10-26T03:32:19.526Z] [INFO   ] 2025-10-26T03:32:19.525Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:32:19.837Z] [INFO   ] 2025-10-26T03:32:19.837Z [INFO] [NewWorkflowBuilderContent] URL params: {"aiChat":"true","hasInitialPrompt":true,"initialPrompt":"when I get an email send it to slack"}
[2025-10-26T03:32:20.341Z] [INFO   ] 2025-10-26T03:32:20.340Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:32:20.340Z","headers":{"referer":"check-console"}}
[2025-10-26T03:32:20.507Z] [INFO   ] 2025-10-26T03:32:20.507Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:32:20.673Z] [INFO   ] 2025-10-26T03:32:20.673Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:32:21.561Z] [INFO   ] 2025-10-26T03:32:21.561Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"when I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:32:25.135Z] [INFO   ] 2025-10-26T03:32:25.135Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T03:32:26.303Z] [INFO   ] 2025-10-26T03:32:26.303Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:32:26.656Z] [INFO   ] 2025-10-26T03:32:26.656Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:32:26.794Z] [INFO   ] 2025-10-26T03:32:26.794Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:32:27.483Z] [INFO   ] 2025-10-26T03:32:27.483Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:33:41.566Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 710ms (1667 modules)
[2025-10-26T03:33:41.949Z] [INFO   ] 2025-10-26T03:33:41.949Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/05453ac1-e3a5-4229-9308-81e7a2d28a6e","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12882934550}
[2025-10-26T03:33:42.083Z] [INFO   ] 2025-10-26T03:33:42.083Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:33:43.630Z] [INFO   ] 2025-10-26T03:33:43.630Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:33:43.630Z","headers":{"referer":"check-console"}}
[2025-10-26T03:33:43.741Z] [INFO   ] 2025-10-26T03:33:43.740Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:33:43.854Z] [INFO   ] 2025-10-26T03:33:43.854Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:34:16.808Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 774ms (1667 modules)
[2025-10-26T03:34:16.842Z] [WARN   ]  [33m[1m‚ö†[22m[39m Fast Refresh had to perform a full reload due to a runtime error.
[2025-10-26T03:34:17.190Z] [INFO   ] 2025-10-26T03:34:17.189Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/05453ac1-e3a5-4229-9308-81e7a2d28a6e","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12882969790}
[2025-10-26T03:34:17.580Z] [INFO   ] 2025-10-26T03:34:17.580Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:34:17.586Z] [INFO   ] 2025-10-26T03:34:17.586Z [INFO] [NewWorkflowBuilderContent] URL params: {"aiChat":"true","hasInitialPrompt":true,"initialPrompt":"when I get an email send it to slack"}
[2025-10-26T03:34:18.046Z] [INFO   ] 2025-10-26T03:34:18.046Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:34:18.046Z","headers":{"referer":"check-console"}}
[2025-10-26T03:34:18.238Z] [INFO   ] 2025-10-26T03:34:18.238Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:34:18.515Z] [INFO   ] 2025-10-26T03:34:18.515Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:34:19.430Z] [INFO   ] 2025-10-26T03:34:19.429Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"when I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:34:22.049Z] [INFO   ] 2025-10-26T03:34:22.048Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T03:34:22.663Z] [INFO   ] 2025-10-26T03:34:22.663Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:34:23.003Z] [INFO   ] 2025-10-26T03:34:23.002Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:34:23.019Z] [INFO   ] 2025-10-26T03:34:23.019Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:34:23.698Z] [INFO   ] 2025-10-26T03:34:23.698Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:35:03.808Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 477ms (1667 modules)
[2025-10-26T03:35:04.042Z] [INFO   ] 2025-10-26T03:35:04.042Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/05453ac1-e3a5-4229-9308-81e7a2d28a6e","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12883016643}
[2025-10-26T03:35:04.373Z] [INFO   ] 2025-10-26T03:35:04.372Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:37:23.886Z] [INFO   ] 2025-10-26T03:37:23.885Z [DEBUG] [Middleware] Username check: {"path":"/workflows/ai-agent","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12883156486}
[2025-10-26T03:37:24.171Z] [INFO   ] 2025-10-26T03:37:24.171Z [DEBUG] üíß [AUTH] Rehydrating auth state from storage {"hasState":true,"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:37:24.171Z"}
[2025-10-26T03:37:24.174Z] [INFO   ] 2025-10-26T03:37:24.174Z [DEBUG] üíß [AUTH] State hydrated and reset {"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:37:24.174Z"}
[2025-10-26T03:37:24.174Z] [INFO   ] 2025-10-26T03:37:24.174Z [DEBUG] ‚è≠Ô∏è [AUTH] Skipping initialization {"hasState":true,"alreadyInitialized":false,"isClient":false,"timestamp":"2025-10-26T03:37:24.174Z"}
[2025-10-26T03:37:24.396Z] [INFO   ] 2025-10-26T03:37:24.396Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:37:28.272Z] [INFO   ] 2025-10-26T03:37:28.272Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:37:28.272Z","headers":{"referer":"check-console"}}
[2025-10-26T03:37:28.393Z] [INFO   ] 2025-10-26T03:37:28.393Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:37:28.475Z] [INFO   ] 2025-10-26T03:37:28.475Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:37:30.922Z] [INFO   ] 2025-10-26T03:37:30.922Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12883163523}
[2025-10-26T03:37:31.217Z] [INFO   ] 2025-10-26T03:37:31.217Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:37:32.785Z] [INFO   ] 2025-10-26T03:37:32.785Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"When I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:37:35.107Z] [INFO   ] 2025-10-26T03:37:35.107Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T03:37:35.749Z] [INFO   ] 2025-10-26T03:37:35.748Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:37:36.088Z] [INFO   ] 2025-10-26T03:37:36.087Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:37:36.113Z] [INFO   ] 2025-10-26T03:37:36.113Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:37:36.742Z] [INFO   ] 2025-10-26T03:37:36.742Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:37:39.632Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/ai/stream-workflow in 285ms (812 modules)
[2025-10-26T03:37:40.197Z] [INFO   ] 2025-10-26T03:37:40.196Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12883172797}
[2025-10-26T03:37:40.316Z] [INFO   ] 2025-10-26T03:37:40.316Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:37:42.090Z] [INFO   ] [Prerequisite Check] Required apps: [ 'gmail', 'slack' ]
[2025-10-26T03:37:42.092Z] [INFO   ] [Prerequisite Check] Connected integrations: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'google-drive',
  'dropbox',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T03:37:42.093Z] [INFO   ] [Prerequisite Check] Normalized connected: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'google-drive',
  'dropbox',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T03:37:42.093Z] [INFO   ] [Prerequisite Check] Checking gmail (normalized: gmail): CONNECTED
[2025-10-26T03:37:42.093Z] [INFO   ] [Prerequisite Check] Checking slack (normalized: slack): CONNECTED
[2025-10-26T03:37:44.956Z] [INFO   ] 2025-10-26T03:37:44.956Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12883177557}
[2025-10-26T03:37:45.145Z] [ERROR  ] aborted
Error: aborted
    at abortIncoming (node:_http_server:809:17)
    at socketOnClose (node:_http_server:803:3)
    at Socket.emit (node:events:519:35)
    at TCP.<anonymous> (node:net:351:12)
    at TCP.callbackTrampoline (node:internal/async_hooks:130:17)
[2025-10-26T03:37:45.146Z] [ERROR  ]  [31m[1m‚®Ø[22m[39m uncaughtException: aborted
Error: aborted
    at abortIncoming (node:_http_server:809:17)
    at socketOnClose (node:_http_server:803:3)
    at Socket.emit (node:events:519:35)
    at TCP.<anonymous> (node:net:351:12)
    at TCP.callbackTrampoline (node:internal/async_hooks:130:17)
[2025-10-26T03:37:45.147Z] [ERROR  ]  [31m[1m‚®Ø[22m[39m uncaughtException:  aborted
Error: aborted
    at abortIncoming (node:_http_server:809:17)
    at socketOnClose (node:_http_server:803:3)
    at Socket.emit (node:events:519:35)
    at TCP.<anonymous> (node:net:351:12)
    at TCP.callbackTrampoline (node:internal/async_hooks:130:17)
[2025-10-26T03:37:45.271Z] [INFO   ] 2025-10-26T03:37:45.270Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:37:45.283Z] [INFO   ] 2025-10-26T03:37:45.283Z [INFO] [NewWorkflowBuilderContent] URL params: {"aiChat":"true","hasInitialPrompt":true,"initialPrompt":"When I get an email send it to slack"}
[2025-10-26T03:37:45.765Z] [INFO   ] 2025-10-26T03:37:45.765Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:37:45.765Z","headers":{"referer":"check-console"}}
[2025-10-26T03:37:45.914Z] [INFO   ] 2025-10-26T03:37:45.914Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:37:45.999Z] [INFO   ] 2025-10-26T03:37:45.999Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:37:46.104Z] [ERROR  ] 2025-10-26T03:37:46.104Z [ERROR] Stream workflow error: {"message":"Invalid state: Controller is already closed","stack":"TypeError: Invalid state: Controller is already closed\n    at ReadableStreamDefaultController.enqueue (node:internal/webstreams/readablestream:1077:13)\n    at sendEvent (webpack-internal:///(rsc)/./app/api/ai/stream-workflow/route.ts:58:32)\n    at Object.start (webpack-internal:///(rsc)/./app/api/ai/stream-workflow/route.ts:186:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)","name":"TypeError","fullError":"{\n  \"code\": \"ERR_INVALID_STATE\"\n}"}
[2025-10-26T03:37:46.941Z] [INFO   ] 2025-10-26T03:37:46.941Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"When I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:37:50.006Z] [INFO   ] 2025-10-26T03:37:50.006Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T03:37:50.566Z] [INFO   ] 2025-10-26T03:37:50.566Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:37:50.957Z] [INFO   ] 2025-10-26T03:37:50.957Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:37:51.054Z] [INFO   ] 2025-10-26T03:37:51.054Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:37:51.784Z] [INFO   ] 2025-10-26T03:37:51.784Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:37:54.643Z] [INFO   ] [Prerequisite Check] Required apps: [ 'gmail', 'slack' ]
[2025-10-26T03:37:54.644Z] [INFO   ] [Prerequisite Check] Connected integrations: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'google-drive',
  'dropbox',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T03:37:54.644Z] [INFO   ] [Prerequisite Check] Normalized connected: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'google-drive',
  'dropbox',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T03:37:54.645Z] [INFO   ] [Prerequisite Check] Checking gmail (normalized: gmail): CONNECTED
[2025-10-26T03:37:54.645Z] [INFO   ] [Prerequisite Check] Checking slack (normalized: slack): CONNECTED
[2025-10-26T03:38:01.250Z] [INFO   ] [STREAM] Phase 2: Starting node creation, plan: {
  understanding: 'The user wants to automatically send any incoming email to a Slack channel.',
  nodes: [
  {
  type: 'gmail_trigger_new_email',
  title: 'New Email Trigger',
  description: 'Triggers the workflow when a new email is received in Gmail.',
  reasoning: 'This node is necessary to initiate the workflow whenever a new email arrives.'
},
  {
  type: 'slack_action_send_message',
  title: 'Send Message to Slack',
  description: 'Sends a message to a specified Slack channel.',
  reasoning: 'This node is needed to deliver the content of the email to the Slack channel.'
}
],
  connections: 'The workflow starts with the Gmail trigger node, which detects a new email. Once triggered, it connects to the Slack action node to send the email content to the designated Slack channel.'
}
[2025-10-26T03:38:01.251Z] [INFO   ] [STREAM] Plan nodes: [
  {
  type: 'gmail_trigger_new_email',
  title: 'New Email Trigger',
  description: 'Triggers the workflow when a new email is received in Gmail.',
  reasoning: 'This node is necessary to initiate the workflow whenever a new email arrives.'
},
  {
  type: 'slack_action_send_message',
  title: 'Send Message to Slack',
  description: 'Sends a message to a specified Slack channel.',
  reasoning: 'This node is needed to deliver the content of the email to the Slack channel.'
}
]
[2025-10-26T03:38:01.251Z] [INFO   ] [POSITION] Node 0 : {
  viewport: { width: 1558, height: 1211, zoom: 0.75, chatPanelWidth: 1000 },
  effectiveViewportWidth: 3410.6666666666665,
  builderViewportWidth: 2077.3333333333335,
  visibleHeight: 1614.6666666666667,
  availableWidth: 1997.3333333333335,
  nodesPerRow: 3,
  row: 0,
  col: 0,
  position: { x: 813.6666666666667, y: 80 }
}
[2025-10-26T03:38:01.354Z] [INFO   ] [POSITION] Node 1 : {
  viewport: { width: 1558, height: 1211, zoom: 0.75, chatPanelWidth: 1000 },
  effectiveViewportWidth: 3410.6666666666665,
  builderViewportWidth: 2077.3333333333335,
  visibleHeight: 1614.6666666666667,
  availableWidth: 1997.3333333333335,
  nodesPerRow: 3,
  row: 0,
  col: 1,
  position: { x: 1103.6666666666667, y: 80 }
}
[2025-10-26T03:38:02.310Z] [INFO   ] [STREAM] Preparing New Email Trigger (node-1761449881251-0)
[2025-10-26T03:38:03.111Z] [INFO   ] [STREAM] Starting configuration for New Email Trigger (node-1761449881251-0)
[2025-10-26T03:38:03.615Z] [INFO   ] [STREAM] Calling generateNodeConfig for New Email Trigger...
[2025-10-26T03:38:03.617Z] [INFO   ] [generateNodeConfig] Starting for node: New Email Trigger
[2025-10-26T03:38:03.617Z] [INFO   ] [generateNodeConfig] nodeComponent: { type: 'gmail_trigger_new_email', providerId: 'gmail' }
[2025-10-26T03:38:03.617Z] [INFO   ] [generateNodeConfig] clarifications received: {}
[2025-10-26T03:38:03.618Z] [INFO   ] [generateNodeConfig] Extracted clarificationEntries: []
[2025-10-26T03:38:03.618Z] [INFO   ] [generateNodeConfig] messageTemplate: undefined
[2025-10-26T03:38:03.618Z] [INFO   ] [generateNodeConfig] Final clarificationContext: NONE
[2025-10-26T03:38:03.618Z] [INFO   ] [generateNodeConfig] Sending prompt to AI...
[2025-10-26T03:38:09.407Z] [INFO   ] [generateNodeConfig] AI returned result: {
  "success": true,
  "config": {
    "nodeType": "gmail_trigger_new_email",
    "description": "Triggers the workflow when a new email is received in Gmail.",
    "email": "{{trigger.email}}",
    "label": "inbox",
    "includeSpamTrash": false,
    "searchString": "",
    "triggerOn": "new_email",
    "pollingInterval": 5
  },
  "reasoning": "The configuration uses a variable from a previous node for the email address, ensuring it dynamically responds to the user's context. The label is set to 'inbox' as a sensible default, and spam/trash inclusion is set to false to avoid irrelevant triggers. The search string is left empty to capture all new emails, and the polling interval is set to 5 minutes to balance responsiveness and resource usage."
}
[2025-10-26T03:38:09.407Z] [INFO   ] [generateNodeConfig] Config from AI: {
  "nodeType": "gmail_trigger_new_email",
  "description": "Triggers the workflow when a new email is received in Gmail.",
  "email": "{{trigger.email}}",
  "label": "inbox",
  "includeSpamTrash": false,
  "searchString": "",
  "triggerOn": "new_email",
  "pollingInterval": 5
}
[2025-10-26T03:38:09.408Z] [INFO   ] [generateNodeConfig] Final config after force-apply: {}
[2025-10-26T03:38:09.408Z] [INFO   ] [STREAM] generateNodeConfig completed in 5793ms for New Email Trigger
[2025-10-26T03:38:09.408Z] [INFO   ] [STREAM] Config result: {
  success: true,
  hasConfig: true,
  configKeys: [],
  finalConfigKeys: [],
  fallbackFields: []
}
[2025-10-26T03:38:09.408Z] [INFO   ] [STREAM] Configuring 0 fields for New Email Trigger: 
[2025-10-26T03:38:09.408Z] [INFO   ] [STREAM] No config for trigger, adding default
[2025-10-26T03:38:09.910Z] [INFO   ] [STREAM] Skipping test for trigger New Email Trigger
[2025-10-26T03:38:11.413Z] [INFO   ] [STREAM] Trigger complete, continuing to next node (loop iteration 0 of 1)
[2025-10-26T03:38:11.714Z] [INFO   ] [STREAM] Completed node 1 of 2, moving to next iteration
[2025-10-26T03:38:11.715Z] [INFO   ] [STREAM] Preparing Send Message to Slack (node-1761449881353-1)
[2025-10-26T03:38:12.517Z] [INFO   ] [STREAM] Starting configuration for Send Message to Slack (node-1761449881353-1)
[2025-10-26T03:38:13.020Z] [INFO   ] [STREAM] Calling generateNodeConfig for Send Message to Slack...
[2025-10-26T03:38:13.021Z] [INFO   ] [generateNodeConfig] Starting for node: Send Message to Slack
[2025-10-26T03:38:13.021Z] [INFO   ] [generateNodeConfig] nodeComponent: { type: 'slack_action_send_message', providerId: 'slack' }
[2025-10-26T03:38:13.021Z] [INFO   ] [generateNodeConfig] clarifications received: {}
[2025-10-26T03:38:13.021Z] [INFO   ] [generateNodeConfig] Extracted clarificationEntries: []
[2025-10-26T03:38:13.022Z] [INFO   ] [generateNodeConfig] messageTemplate: undefined
[2025-10-26T03:38:13.022Z] [INFO   ] [generateNodeConfig] Final clarificationContext: NONE
[2025-10-26T03:38:13.022Z] [INFO   ] [generateNodeConfig] Sending prompt to AI...
[2025-10-26T03:38:19.123Z] [INFO   ] [generateNodeConfig] AI returned result: {
  "success": true,
  "config": {
    "channel": "#general",
    "text": "New email received from {{trigger.data.from}} with subject: {{trigger.data.subject}}",
    "username": "Email Bot",
    "icon_emoji": ":email:",
    "attachments": [
      {
        "fallback": "You have a new email.",
        "color": "#36a64f",
        "pretext": "New Email Notification",
        "author_name": "{{trigger.data.from}}",
        "title": "{{trigger.data.subject}}",
        "text": "Email received at {{trigger.timestamp}}",
        "footer": "Email Bot",
        "ts": "{{trigger.timestamp}}"
      }
    ]
  },
  "reasoning": "The configuration sends a message to the #general channel, which is a common default for Slack notifications. The message text includes the sender's email and the subject of the email, making it relevant to the user's goal of continuing to build on the workflow. The username and icon emoji are set to represent the bot sending the message. An attachment is included for a more structured message, providing additional context about the email, such as the timestamp and a fallback message."
}
[2025-10-26T03:38:19.124Z] [INFO   ] [generateNodeConfig] Config from AI: {
  "channel": "#general",
  "text": "New email received from {{trigger.data.from}} with subject: {{trigger.data.subject}}",
  "username": "Email Bot",
  "icon_emoji": ":email:",
  "attachments": [
    {
      "fallback": "You have a new email.",
      "color": "#36a64f",
      "pretext": "New Email Notification",
      "author_name": "{{trigger.data.from}}",
      "title": "{{trigger.data.subject}}",
      "text": "Email received at {{trigger.timestamp}}",
      "footer": "Email Bot",
      "ts": "{{trigger.timestamp}}"
    }
  ]
}
[2025-10-26T03:38:19.124Z] [INFO   ] [generateNodeConfig] Final config after force-apply: {
  "channel": "#general",
  "username": "Email Bot",
  "attachments": [
    {
      "fallback": "You have a new email.",
      "color": "#36a64f",
      "pretext": "New Email Notification",
      "author_name": "{{trigger.data.from}}",
      "title": "{{trigger.data.subject}}",
      "text": "Email received at {{trigger.timestamp}}",
      "footer": "Email Bot",
      "ts": "{{trigger.timestamp}}"
    }
  ]
}
[2025-10-26T03:38:19.125Z] [INFO   ] [STREAM] generateNodeConfig completed in 6103ms for Send Message to Slack
[2025-10-26T03:38:19.125Z] [INFO   ] [STREAM] Config result: {
  success: true,
  hasConfig: true,
  configKeys: [ 'channel', 'username', 'attachments' ],
  finalConfigKeys: [ 'channel', 'username', 'attachments', 'message' ],
  fallbackFields: [ 'message' ]
}
[2025-10-26T03:38:19.126Z] [INFO   ] [STREAM] Configuring 4 fields for Send Message to Slack: channel, username, attachments, message
[2025-10-26T03:38:19.126Z] [INFO   ] [STREAM] Setting field channel = #general for Send Message to Slack
[2025-10-26T03:38:19.428Z] [INFO   ] [STREAM] Setting field username = Email Bot for Send Message to Slack
[2025-10-26T03:38:19.731Z] [INFO   ] [STREAM] Setting field attachments = [object Object] for Send Message to Slack
[2025-10-26T03:38:20.034Z] [INFO   ] [STREAM] Setting field message =  for Send Message to Slack
[2025-10-26T03:38:26.742Z] [INFO   ] [STREAM] Completed node 2 of 2, moving to next iteration
[2025-10-26T03:38:26.743Z] [INFO   ] [STREAM] All nodes configured and tested, sending workflow_complete event
[2025-10-26T03:43:57.172Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 1475ms (1900 modules)
[2025-10-26T03:43:57.716Z] [INFO   ] 2025-10-26T03:43:57.716Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12883550316}
[2025-10-26T03:43:57.863Z] [INFO   ] 2025-10-26T03:43:57.863Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:43:59.449Z] [INFO   ] 2025-10-26T03:43:59.449Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:43:59.449Z","headers":{"referer":"check-console"}}
[2025-10-26T03:43:59.521Z] [INFO   ] 2025-10-26T03:43:59.521Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:43:59.610Z] [INFO   ] 2025-10-26T03:43:59.610Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:44:36.678Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 536ms (1667 modules)
[2025-10-26T03:44:36.717Z] [WARN   ]  [33m[1m‚ö†[22m[39m Fast Refresh had to perform a full reload due to a runtime error.
[2025-10-26T03:44:36.934Z] [INFO   ] 2025-10-26T03:44:36.934Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12883589535}
[2025-10-26T03:44:37.291Z] [INFO   ] 2025-10-26T03:44:37.291Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:44:37.306Z] [INFO   ] 2025-10-26T03:44:37.305Z [INFO] [NewWorkflowBuilderContent] URL params: {"aiChat":"true","hasInitialPrompt":true,"initialPrompt":"When I get an email send it to slack"}
[2025-10-26T03:44:37.822Z] [INFO   ] 2025-10-26T03:44:37.821Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:44:37.821Z","headers":{"referer":"check-console"}}
[2025-10-26T03:44:37.992Z] [INFO   ] 2025-10-26T03:44:37.991Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:44:38.141Z] [INFO   ] 2025-10-26T03:44:38.141Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:44:39.525Z] [INFO   ] 2025-10-26T03:44:39.525Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"When I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:44:42.102Z] [INFO   ] 2025-10-26T03:44:42.102Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T03:44:42.695Z] [INFO   ] 2025-10-26T03:44:42.695Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:44:43.044Z] [INFO   ] 2025-10-26T03:44:43.044Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:44:43.138Z] [INFO   ] 2025-10-26T03:44:43.138Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:44:43.779Z] [INFO   ] 2025-10-26T03:44:43.779Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:44:44.308Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 474ms (1667 modules)
[2025-10-26T03:44:44.490Z] [INFO   ] 2025-10-26T03:44:44.490Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12883597091}
[2025-10-26T03:44:44.610Z] [INFO   ] 2025-10-26T03:44:44.609Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:45:00.112Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 523ms (1667 modules)
[2025-10-26T03:45:00.145Z] [WARN   ]  [33m[1m‚ö†[22m[39m Fast Refresh had to perform a full reload due to a runtime error.
[2025-10-26T03:45:00.421Z] [INFO   ] 2025-10-26T03:45:00.421Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12883613022}
[2025-10-26T03:45:00.733Z] [INFO   ] 2025-10-26T03:45:00.733Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:45:00.742Z] [INFO   ] 2025-10-26T03:45:00.742Z [INFO] [NewWorkflowBuilderContent] URL params: {"aiChat":"true","hasInitialPrompt":true,"initialPrompt":"When I get an email send it to slack"}
[2025-10-26T03:45:01.277Z] [INFO   ] 2025-10-26T03:45:01.277Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:45:01.277Z","headers":{"referer":"check-console"}}
[2025-10-26T03:45:01.467Z] [INFO   ] 2025-10-26T03:45:01.467Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:45:01.562Z] [INFO   ] 2025-10-26T03:45:01.562Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:45:02.438Z] [INFO   ] 2025-10-26T03:45:02.438Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"When I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:45:05.820Z] [INFO   ] 2025-10-26T03:45:05.820Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T03:45:06.480Z] [INFO   ] 2025-10-26T03:45:06.480Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:45:06.812Z] [INFO   ] 2025-10-26T03:45:06.812Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:45:06.943Z] [INFO   ] 2025-10-26T03:45:06.943Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:45:07.605Z] [INFO   ] 2025-10-26T03:45:07.604Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:47:46.779Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /api/ai/stream-workflow ...
[2025-10-26T03:47:46.801Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/ai/stream-workflow in 654ms (812 modules)
[2025-10-26T03:47:47.336Z] [INFO   ] 2025-10-26T03:47:47.336Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12883779936}
[2025-10-26T03:47:47.476Z] [INFO   ] 2025-10-26T03:47:47.475Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:47:49.023Z] [INFO   ] 2025-10-26T03:47:49.023Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:47:49.023Z","headers":{"referer":"check-console"}}
[2025-10-26T03:47:49.101Z] [INFO   ] 2025-10-26T03:47:49.101Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:47:49.141Z] [INFO   ] [Prerequisite Check] Required apps: [ 'gmail', 'slack' ]
[2025-10-26T03:47:49.142Z] [INFO   ] [Prerequisite Check] Connected integrations: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'google-drive',
  'dropbox',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T03:47:49.142Z] [INFO   ] [Prerequisite Check] Normalized connected: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'google-drive',
  'dropbox',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T03:47:49.142Z] [INFO   ] [Prerequisite Check] Checking gmail (normalized: gmail): CONNECTED
[2025-10-26T03:47:49.142Z] [INFO   ] [Prerequisite Check] Checking slack (normalized: slack): CONNECTED
[2025-10-26T03:47:49.191Z] [INFO   ] 2025-10-26T03:47:49.191Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:47:52.035Z] [INFO   ] 2025-10-26T03:47:52.035Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12883784636}
[2025-10-26T03:47:52.414Z] [INFO   ] 2025-10-26T03:47:52.413Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:47:52.437Z] [INFO   ] 2025-10-26T03:47:52.436Z [INFO] [NewWorkflowBuilderContent] URL params: {"aiChat":"true","hasInitialPrompt":true,"initialPrompt":"When I get an email send it to slack"}
[2025-10-26T03:47:53.022Z] [INFO   ] 2025-10-26T03:47:53.022Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:47:53.022Z","headers":{"referer":"check-console"}}
[2025-10-26T03:47:53.129Z] [INFO   ] 2025-10-26T03:47:53.129Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:47:53.205Z] [INFO   ] 2025-10-26T03:47:53.205Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:47:54.076Z] [INFO   ] 2025-10-26T03:47:54.075Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"When I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:47:56.634Z] [INFO   ] 2025-10-26T03:47:56.634Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T03:47:57.255Z] [INFO   ] 2025-10-26T03:47:57.254Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:47:57.631Z] [INFO   ] 2025-10-26T03:47:57.631Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:47:57.678Z] [INFO   ] 2025-10-26T03:47:57.678Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:47:58.340Z] [INFO   ] 2025-10-26T03:47:58.340Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:48:01.520Z] [INFO   ] [Prerequisite Check] Required apps: [ 'gmail', 'slack' ]
[2025-10-26T03:48:01.520Z] [INFO   ] [Prerequisite Check] Connected integrations: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'google-drive',
  'dropbox',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T03:48:01.521Z] [INFO   ] [Prerequisite Check] Normalized connected: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'google-drive',
  'dropbox',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T03:48:01.521Z] [INFO   ] [Prerequisite Check] Checking gmail (normalized: gmail): CONNECTED
[2025-10-26T03:48:01.521Z] [INFO   ] [Prerequisite Check] Checking slack (normalized: slack): CONNECTED
[2025-10-26T03:48:05.853Z] [INFO   ] [STREAM] Phase 2: Starting node creation, plan: {
  understanding: 'The user wants to automatically send received emails to a Slack channel.',
  nodes: [
  {
  type: 'gmail_trigger_new_email',
  title: 'Trigger on New Email',
  description: 'This node triggers the workflow when a new email is received in Gmail.',
  reasoning: 'This is the starting point of the workflow, as it captures the event of receiving an email.'
},
  {
  type: 'slack_action_send_message',
  title: 'Send Message to Slack',
  description: 'This node sends a message to a specified Slack channel.',
  reasoning: 'This node is needed to send the content of the received email to Slack, fulfilling the user\'s request.'
}
],
  connections: 'The workflow starts with the Gmail trigger node, which activates when a new email is received. This triggers the Slack action node to send the email content to the specified Slack channel.'
}
[2025-10-26T03:48:05.854Z] [INFO   ] [STREAM] Plan nodes: [
  {
  type: 'gmail_trigger_new_email',
  title: 'Trigger on New Email',
  description: 'This node triggers the workflow when a new email is received in Gmail.',
  reasoning: 'This is the starting point of the workflow, as it captures the event of receiving an email.'
},
  {
  type: 'slack_action_send_message',
  title: 'Send Message to Slack',
  description: 'This node sends a message to a specified Slack channel.',
  reasoning: 'This node is needed to send the content of the received email to Slack, fulfilling the user\'s request.'
}
]
[2025-10-26T03:48:05.855Z] [INFO   ] [POSITION] Node 0 : {
  viewport: { width: 1558, height: 1211, zoom: 0.75, chatPanelWidth: 1000 },
  effectiveViewportWidth: 3410.6666666666665,
  builderViewportWidth: 2077.3333333333335,
  visibleHeight: 1614.6666666666667,
  availableWidth: 1997.3333333333335,
  nodesPerRow: 3,
  row: 0,
  col: 0,
  position: { x: 813.6666666666667, y: 80 }
}
[2025-10-26T03:48:05.958Z] [INFO   ] [POSITION] Node 1 : {
  viewport: { width: 1558, height: 1211, zoom: 0.75, chatPanelWidth: 1000 },
  effectiveViewportWidth: 3410.6666666666665,
  builderViewportWidth: 2077.3333333333335,
  visibleHeight: 1614.6666666666667,
  availableWidth: 1997.3333333333335,
  nodesPerRow: 3,
  row: 0,
  col: 1,
  position: { x: 1103.6666666666667, y: 80 }
}
[2025-10-26T03:48:06.915Z] [INFO   ] [STREAM] Preparing Trigger on New Email (node-1761450485854-0)
[2025-10-26T03:48:07.718Z] [INFO   ] [STREAM] Starting configuration for Trigger on New Email (node-1761450485854-0)
[2025-10-26T03:48:08.221Z] [INFO   ] [STREAM] Calling generateNodeConfig for Trigger on New Email...
[2025-10-26T03:48:08.223Z] [INFO   ] [generateNodeConfig] Starting for node: Trigger on New Email
[2025-10-26T03:48:08.223Z] [INFO   ] [generateNodeConfig] nodeComponent: { type: 'gmail_trigger_new_email', providerId: 'gmail' }
[2025-10-26T03:48:08.223Z] [INFO   ] [generateNodeConfig] clarifications received: {}
[2025-10-26T03:48:08.224Z] [INFO   ] [generateNodeConfig] Extracted clarificationEntries: []
[2025-10-26T03:48:08.224Z] [INFO   ] [generateNodeConfig] messageTemplate: undefined
[2025-10-26T03:48:08.224Z] [INFO   ] [generateNodeConfig] Final clarificationContext: NONE
[2025-10-26T03:48:08.224Z] [INFO   ] [generateNodeConfig] Sending prompt to AI...
[2025-10-26T03:48:14.474Z] [INFO   ] [generateNodeConfig] AI returned result: {
  "success": true,
  "config": {
    "node_type": "gmail_trigger_new_email",
    "trigger": {
      "email": "{{trigger.email}}",
      "folder": "inbox",
      "include_spam": false,
      "mark_as_read": false,
      "label": "New Emails"
    },
    "conditions": {
      "has_attachment": false,
      "from": "{{trigger.from}}",
      "subject_contains": "{{trigger.subject}}"
    },
    "actions": {
      "notify": {
        "enabled": true,
        "method": "email",
        "recipient": "{{trigger.recipient}}"
      }
    }
  },
  "reasoning": "The configuration uses variables from previous nodes (like {{trigger.email}}, {{trigger.from}}, and {{trigger.subject}}) to ensure that the workflow can dynamically respond to incoming emails. The folder is set to 'inbox' as a sensible default, and spam is excluded to focus on legitimate emails. The action to notify is enabled by default to inform the user of new emails, with the recipient set to a variable for flexibility."
}
[2025-10-26T03:48:14.475Z] [INFO   ] [generateNodeConfig] Config from AI: {
  "node_type": "gmail_trigger_new_email",
  "trigger": {
    "email": "{{trigger.email}}",
    "folder": "inbox",
    "include_spam": false,
    "mark_as_read": false,
    "label": "New Emails"
  },
  "conditions": {
    "has_attachment": false,
    "from": "{{trigger.from}}",
    "subject_contains": "{{trigger.subject}}"
  },
  "actions": {
    "notify": {
      "enabled": true,
      "method": "email",
      "recipient": "{{trigger.recipient}}"
    }
  }
}
[2025-10-26T03:48:14.476Z] [INFO   ] [generateNodeConfig] Final config after force-apply: {
  "labelIds": [
    "INBOX"
  ]
}
[2025-10-26T03:48:14.476Z] [INFO   ] [STREAM] generateNodeConfig completed in 6254ms for Trigger on New Email
[2025-10-26T03:48:14.476Z] [INFO   ] [STREAM] Config result: {
  success: true,
  hasConfig: true,
  configKeys: [ 'labelIds' ],
  finalConfigKeys: [ 'labelIds' ],
  fallbackFields: []
}
[2025-10-26T03:48:14.477Z] [INFO   ] [STREAM] Configuring 1 fields for Trigger on New Email: labelIds
[2025-10-26T03:48:14.477Z] [INFO   ] [STREAM] Setting field labelIds = INBOX for Trigger on New Email
[2025-10-26T03:48:15.282Z] [INFO   ] [STREAM] Skipping test for trigger Trigger on New Email
[2025-10-26T03:48:16.785Z] [INFO   ] [STREAM] Trigger complete, continuing to next node (loop iteration 0 of 1)
[2025-10-26T03:48:17.088Z] [INFO   ] [STREAM] Completed node 1 of 2, moving to next iteration
[2025-10-26T03:48:17.090Z] [INFO   ] [STREAM] Preparing Send Message to Slack (node-1761450485957-1)
[2025-10-26T03:48:17.892Z] [INFO   ] [STREAM] Starting configuration for Send Message to Slack (node-1761450485957-1)
[2025-10-26T03:48:18.393Z] [INFO   ] [STREAM] Calling generateNodeConfig for Send Message to Slack...
[2025-10-26T03:48:18.394Z] [INFO   ] [generateNodeConfig] Starting for node: Send Message to Slack
[2025-10-26T03:48:18.394Z] [INFO   ] [generateNodeConfig] nodeComponent: { type: 'slack_action_send_message', providerId: 'slack' }
[2025-10-26T03:48:18.394Z] [INFO   ] [generateNodeConfig] clarifications received: {}
[2025-10-26T03:48:18.394Z] [INFO   ] [generateNodeConfig] Extracted clarificationEntries: []
[2025-10-26T03:48:18.394Z] [INFO   ] [generateNodeConfig] messageTemplate: undefined
[2025-10-26T03:48:18.395Z] [INFO   ] [generateNodeConfig] Final clarificationContext: NONE
[2025-10-26T03:48:18.395Z] [INFO   ] [generateNodeConfig] Sending prompt to AI...
[2025-10-26T03:48:48.403Z] [ERROR  ] 2025-10-26T03:48:48.403Z [ERROR] AI call failed: {}
[2025-10-26T03:48:48.404Z] [INFO   ] [generateNodeConfig] AI returned result: {
  "success": false,
  "error": "AI API request timed out after 30 seconds"
}
[2025-10-26T03:48:48.404Z] [INFO   ] [generateNodeConfig] Config from AI: undefined
[2025-10-26T03:48:48.404Z] [INFO   ] [generateNodeConfig] No config from AI, initializing empty config
[2025-10-26T03:48:48.405Z] [INFO   ] [generateNodeConfig] Final config after force-apply: {}
[2025-10-26T03:48:48.405Z] [INFO   ] [STREAM] generateNodeConfig completed in 30011ms for Send Message to Slack
[2025-10-26T03:48:48.405Z] [INFO   ] [STREAM] Config result: {
  success: false,
  hasConfig: true,
  configKeys: [],
  finalConfigKeys: [ 'message' ],
  fallbackFields: [ 'message' ]
}
[2025-10-26T03:48:48.406Z] [INFO   ] [STREAM] Configuring 1 fields for Send Message to Slack: message
[2025-10-26T03:48:48.406Z] [INFO   ] [STREAM] Setting field message =  for Send Message to Slack
[2025-10-26T03:48:55.003Z] [INFO   ] [STREAM] Completed node 2 of 2, moving to next iteration
[2025-10-26T03:48:55.004Z] [INFO   ] [STREAM] All nodes configured and tested, sending workflow_complete event
[2025-10-26T03:57:00.423Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 1307ms (1900 modules)
[2025-10-26T03:57:01.036Z] [INFO   ] 2025-10-26T03:57:01.036Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12884333636}
[2025-10-26T03:57:01.198Z] [INFO   ] 2025-10-26T03:57:01.198Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:57:19.366Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 1585ms (5937 modules)
[2025-10-26T03:57:19.417Z] [WARN   ]  [33m[1m‚ö†[22m[39m Fast Refresh had to perform a full reload due to a runtime error.
[2025-10-26T03:57:19.596Z] [INFO   ] 2025-10-26T03:57:19.596Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12884352197}
[2025-10-26T03:57:19.973Z] [INFO   ] 2025-10-26T03:57:19.973Z [DEBUG] üíß [AUTH] Rehydrating auth state from storage {"hasState":true,"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:57:19.973Z"}
[2025-10-26T03:57:19.984Z] [INFO   ] 2025-10-26T03:57:19.984Z [DEBUG] üíß [AUTH] State hydrated and reset {"hasUser":false,"initialized":false,"timestamp":"2025-10-26T03:57:19.984Z"}
[2025-10-26T03:57:19.985Z] [INFO   ] 2025-10-26T03:57:19.985Z [DEBUG] ‚è≠Ô∏è [AUTH] Skipping initialization {"hasState":true,"alreadyInitialized":false,"isClient":false,"timestamp":"2025-10-26T03:57:19.985Z"}
[2025-10-26T03:57:20.238Z] [INFO   ] 2025-10-26T03:57:20.238Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T03:57:20.550Z] [INFO   ] 2025-10-26T03:57:20.550Z [INFO] [NewWorkflowBuilderContent] URL params: {"aiChat":"true","hasInitialPrompt":true,"initialPrompt":"When I get an email send it to slack"}
[2025-10-26T03:57:21.177Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /api/integrations ...
[2025-10-26T03:57:21.305Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/collaboration/join in 682ms (4272 modules)
[2025-10-26T03:57:21.756Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled (4279 modules)
[2025-10-26T03:57:21.862Z] [INFO   ] 2025-10-26T03:57:21.862Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T03:57:21.862Z","headers":{"referer":"check-console"}}
[2025-10-26T03:57:22.040Z] [INFO   ] 2025-10-26T03:57:22.040Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:57:22.149Z] [INFO   ] 2025-10-26T03:57:22.149Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T03:57:23.231Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/ai/analyze-request in 358ms (4281 modules)
[2025-10-26T03:57:23.451Z] [INFO   ] 2025-10-26T03:57:23.450Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"When I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T03:57:27.440Z] [INFO   ] 2025-10-26T03:57:27.440Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T03:57:28.132Z] [INFO   ]  [37m[1m‚óã[22m[39m Compiling /api/integrations/gmail/senders ...
[2025-10-26T03:57:29.058Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/integrations/gmail/senders in 1471ms (4284 modules)
[2025-10-26T03:57:29.605Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled (4286 modules)
[2025-10-26T03:57:30.126Z] [INFO   ] 2025-10-26T03:57:30.125Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:57:30.490Z] [INFO   ] 2025-10-26T03:57:30.490Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T03:57:30.527Z] [INFO   ] 2025-10-26T03:57:30.527Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:57:31.162Z] [INFO   ] 2025-10-26T03:57:31.161Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T03:57:35.759Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 458ms (1667 modules)
[2025-10-26T03:57:36.011Z] [INFO   ] 2025-10-26T03:57:36.011Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12884368612}
[2025-10-26T03:57:36.262Z] [INFO   ] 2025-10-26T03:57:36.262Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T04:00:56.255Z] [INFO   ] 2025-10-26T04:00:56.255Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12884568856}
[2025-10-26T04:00:56.495Z] [INFO   ] 2025-10-26T04:00:56.495Z [DEBUG] üíß [AUTH] Rehydrating auth state from storage {"hasState":true,"hasUser":false,"initialized":false,"timestamp":"2025-10-26T04:00:56.495Z"}
[2025-10-26T04:00:56.496Z] [INFO   ] 2025-10-26T04:00:56.496Z [DEBUG] üíß [AUTH] State hydrated and reset {"hasUser":false,"initialized":false,"timestamp":"2025-10-26T04:00:56.496Z"}
[2025-10-26T04:00:56.496Z] [INFO   ] 2025-10-26T04:00:56.496Z [DEBUG] ‚è≠Ô∏è [AUTH] Skipping initialization {"hasState":true,"alreadyInitialized":false,"isClient":false,"timestamp":"2025-10-26T04:00:56.496Z"}
[2025-10-26T04:00:56.748Z] [INFO   ] 2025-10-26T04:00:56.747Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T04:00:57.325Z] [INFO   ] 2025-10-26T04:00:57.325Z [INFO] [NewWorkflowBuilderContent] URL params: {"aiChat":"true","hasInitialPrompt":true,"initialPrompt":"When I get an email send it to slack"}
[2025-10-26T04:00:57.861Z] [INFO   ] 2025-10-26T04:00:57.861Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T04:00:57.861Z","headers":{"referer":"check-console"}}
[2025-10-26T04:00:58.009Z] [INFO   ] 2025-10-26T04:00:58.009Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T04:00:58.127Z] [INFO   ] 2025-10-26T04:00:58.127Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T04:00:59.021Z] [INFO   ] 2025-10-26T04:00:59.021Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"When I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T04:01:02.355Z] [INFO   ] 2025-10-26T04:01:02.355Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T04:01:03.550Z] [INFO   ] 2025-10-26T04:01:03.550Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T04:01:03.934Z] [INFO   ] 2025-10-26T04:01:03.934Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T04:01:03.948Z] [INFO   ] 2025-10-26T04:01:03.948Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T04:01:04.591Z] [INFO   ] 2025-10-26T04:01:04.590Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T04:01:05.882Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled /api/ai/stream-workflow in 236ms (812 modules)
[2025-10-26T04:01:06.394Z] [INFO   ] 2025-10-26T04:01:06.394Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12884578995}
[2025-10-26T04:01:06.498Z] [INFO   ] 2025-10-26T04:01:06.498Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T04:01:08.305Z] [INFO   ] [Prerequisite Check] Required apps: [ 'gmail', 'slack' ]
[2025-10-26T04:01:08.307Z] [INFO   ] [Prerequisite Check] Connected integrations: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'dropbox',
  'google-drive',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T04:01:08.307Z] [INFO   ] [Prerequisite Check] Normalized connected: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'dropbox',
  'google-drive',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T04:01:08.307Z] [INFO   ] [Prerequisite Check] Checking gmail (normalized: gmail): CONNECTED
[2025-10-26T04:01:08.307Z] [INFO   ] [Prerequisite Check] Checking slack (normalized: slack): CONNECTED
[2025-10-26T04:01:09.736Z] [INFO   ] 2025-10-26T04:01:09.736Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12884582336}
[2025-10-26T04:01:09.925Z] [ERROR  ] aborted
Error: aborted
    at abortIncoming (node:_http_server:809:17)
    at socketOnClose (node:_http_server:803:3)
    at Socket.emit (node:events:519:35)
    at TCP.<anonymous> (node:net:351:12)
    at TCP.callbackTrampoline (node:internal/async_hooks:130:17)
[2025-10-26T04:01:09.926Z] [ERROR  ]  [31m[1m‚®Ø[22m[39m uncaughtException: aborted
Error: aborted
    at abortIncoming (node:_http_server:809:17)
    at socketOnClose (node:_http_server:803:3)
    at Socket.emit (node:events:519:35)
    at TCP.<anonymous> (node:net:351:12)
    at TCP.callbackTrampoline (node:internal/async_hooks:130:17)
[2025-10-26T04:01:09.926Z] [ERROR  ]  [31m[1m‚®Ø[22m[39m uncaughtException:  aborted
Error: aborted
    at abortIncoming (node:_http_server:809:17)
    at socketOnClose (node:_http_server:803:3)
    at Socket.emit (node:events:519:35)
    at TCP.<anonymous> (node:net:351:12)
    at TCP.callbackTrampoline (node:internal/async_hooks:130:17)
[2025-10-26T04:01:10.071Z] [INFO   ] 2025-10-26T04:01:10.070Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T04:01:10.077Z] [INFO   ] 2025-10-26T04:01:10.076Z [INFO] [NewWorkflowBuilderContent] URL params: {"aiChat":"true","hasInitialPrompt":true,"initialPrompt":"When I get an email send it to slack"}
[2025-10-26T04:01:10.882Z] [INFO   ] 2025-10-26T04:01:10.882Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T04:01:10.882Z","headers":{"referer":"check-console"}}
[2025-10-26T04:01:10.978Z] [INFO   ] 2025-10-26T04:01:10.978Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T04:01:11.176Z] [INFO   ] 2025-10-26T04:01:11.176Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T04:01:12.045Z] [INFO   ] 2025-10-26T04:01:12.045Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"When I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T04:01:12.926Z] [ERROR  ] 2025-10-26T04:01:12.926Z [ERROR] Stream workflow error: {"message":"Invalid state: Controller is already closed","stack":"TypeError: Invalid state: Controller is already closed\n    at ReadableStreamDefaultController.enqueue (node:internal/webstreams/readablestream:1077:13)\n    at sendEvent (webpack-internal:///(rsc)/./app/api/ai/stream-workflow/route.ts:58:32)\n    at Object.start (webpack-internal:///(rsc)/./app/api/ai/stream-workflow/route.ts:186:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)","name":"TypeError","fullError":"{\n  \"code\": \"ERR_INVALID_STATE\"\n}"}
[2025-10-26T04:01:15.407Z] [INFO   ] 2025-10-26T04:01:15.406Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T04:01:15.951Z] [INFO   ] 2025-10-26T04:01:15.951Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T04:01:16.303Z] [INFO   ] 2025-10-26T04:01:16.303Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T04:01:16.444Z] [INFO   ] 2025-10-26T04:01:16.444Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T04:01:17.087Z] [INFO   ] 2025-10-26T04:01:17.087Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":12}
[2025-10-26T04:01:20.050Z] [INFO   ] [Prerequisite Check] Required apps: [ 'gmail', 'slack' ]
[2025-10-26T04:01:20.051Z] [INFO   ] [Prerequisite Check] Connected integrations: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'dropbox',
  'google-drive',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T04:01:20.051Z] [INFO   ] [Prerequisite Check] Normalized connected: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'dropbox',
  'google-drive',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T04:01:20.051Z] [INFO   ] [Prerequisite Check] Checking gmail (normalized: gmail): CONNECTED
[2025-10-26T04:01:20.051Z] [INFO   ] [Prerequisite Check] Checking slack (normalized: slack): CONNECTED
[2025-10-26T04:01:25.019Z] [INFO   ] [STREAM] Phase 2: Starting node creation, plan: {
  understanding: 'The user wants to automatically send received emails to a Slack channel.',
  nodes: [
  {
  type: 'gmail_trigger_new_email',
  title: 'Trigger on New Email',
  description: 'This node triggers the workflow when a new email is received in Gmail.',
  reasoning: 'This is the starting point of the workflow, as it detects incoming emails.'
},
  {
  type: 'slack_action_send_message',
  title: 'Send Message to Slack',
  description: 'This node sends a message to a specified Slack channel.',
  reasoning: 'This action will take the content of the email and send it to Slack, fulfilling the user\'s request.'
}
],
  connections: 'The workflow starts with the Gmail trigger for new emails, which connects directly to the Slack action to send the email content as a message.'
}
[2025-10-26T04:01:25.020Z] [INFO   ] [STREAM] Plan nodes: [
  {
  type: 'gmail_trigger_new_email',
  title: 'Trigger on New Email',
  description: 'This node triggers the workflow when a new email is received in Gmail.',
  reasoning: 'This is the starting point of the workflow, as it detects incoming emails.'
},
  {
  type: 'slack_action_send_message',
  title: 'Send Message to Slack',
  description: 'This node sends a message to a specified Slack channel.',
  reasoning: 'This action will take the content of the email and send it to Slack, fulfilling the user\'s request.'
}
]
[2025-10-26T04:01:25.020Z] [INFO   ] [POSITION] Node 0 : {
  viewport: { width: 1558, height: 1211, zoom: 0.75, chatPanelWidth: 1000 },
  effectiveViewportWidth: 3410.6666666666665,
  builderViewportWidth: 2077.3333333333335,
  visibleHeight: 1614.6666666666667,
  availableWidth: 1997.3333333333335,
  nodesPerRow: 3,
  row: 0,
  col: 0,
  position: { x: 813.6666666666667, y: 80 }
}
[2025-10-26T04:01:25.123Z] [INFO   ] [POSITION] Node 1 : {
  viewport: { width: 1558, height: 1211, zoom: 0.75, chatPanelWidth: 1000 },
  effectiveViewportWidth: 3410.6666666666665,
  builderViewportWidth: 2077.3333333333335,
  visibleHeight: 1614.6666666666667,
  availableWidth: 1997.3333333333335,
  nodesPerRow: 3,
  row: 0,
  col: 1,
  position: { x: 1103.6666666666667, y: 80 }
}
[2025-10-26T04:01:26.079Z] [INFO   ] [STREAM] Preparing Trigger on New Email (node-1761451285020-0)
[2025-10-26T04:01:26.882Z] [INFO   ] [STREAM] Starting configuration for Trigger on New Email (node-1761451285020-0)
[2025-10-26T04:01:27.384Z] [INFO   ] [STREAM] Calling generateNodeConfig for Trigger on New Email...
[2025-10-26T04:01:27.385Z] [INFO   ] [generateNodeConfig] Starting for node: Trigger on New Email
[2025-10-26T04:01:27.385Z] [INFO   ] [generateNodeConfig] nodeComponent: { type: 'gmail_trigger_new_email', providerId: 'gmail' }
[2025-10-26T04:01:27.385Z] [INFO   ] [generateNodeConfig] clarifications received: {}
[2025-10-26T04:01:27.386Z] [INFO   ] [generateNodeConfig] Extracted clarificationEntries: []
[2025-10-26T04:01:27.386Z] [INFO   ] [generateNodeConfig] messageTemplate: undefined
[2025-10-26T04:01:27.386Z] [INFO   ] [generateNodeConfig] Final clarificationContext: NONE
[2025-10-26T04:01:27.386Z] [INFO   ] [generateNodeConfig] Sending prompt to AI...
[2025-10-26T04:01:32.336Z] [INFO   ] [generateNodeConfig] AI returned result: {
  "success": true,
  "config": {
    "node_type": "gmail_trigger_new_email",
    "trigger": {
      "email": "{{trigger.email}}",
      "subject": "{{trigger.subject}}",
      "from": "{{trigger.from}}",
      "to": "{{trigger.to}}",
      "body": "{{trigger.body}}"
    },
    "options": {
      "label": "inbox",
      "include_spam": false,
      "mark_as_read": false
    }
  },
  "reasoning": "The configuration uses variables from previous nodes (e.g., {{trigger.email}}, {{trigger.subject}}) to dynamically capture relevant email details. The 'label' is set to 'inbox' as a sensible default, and 'include_spam' is set to false to avoid triggering on spam emails. 'mark_as_read' is set to false to keep the email unread for further processing in the workflow. This setup aligns with the user's goal of continuing the workflow based on new email triggers."
}
[2025-10-26T04:01:32.336Z] [INFO   ] [generateNodeConfig] Config from AI: {
  "node_type": "gmail_trigger_new_email",
  "trigger": {
    "email": "{{trigger.email}}",
    "subject": "{{trigger.subject}}",
    "from": "{{trigger.from}}",
    "to": "{{trigger.to}}",
    "body": "{{trigger.body}}"
  },
  "options": {
    "label": "inbox",
    "include_spam": false,
    "mark_as_read": false
  }
}
[2025-10-26T04:01:32.337Z] [INFO   ] [generateNodeConfig] Final config after force-apply: {
  "labelIds": [
    "INBOX"
  ]
}
[2025-10-26T04:01:32.337Z] [INFO   ] [STREAM] generateNodeConfig completed in 4953ms for Trigger on New Email
[2025-10-26T04:01:32.337Z] [INFO   ] [STREAM] Config result: {
  success: true,
  hasConfig: true,
  configKeys: [ 'labelIds' ],
  finalConfigKeys: [ 'labelIds' ],
  fallbackFields: []
}
[2025-10-26T04:01:32.337Z] [INFO   ] [STREAM] Configuring 1 fields for Trigger on New Email: labelIds
[2025-10-26T04:01:32.337Z] [INFO   ] [STREAM] Setting field labelIds = INBOX for Trigger on New Email
[2025-10-26T04:01:33.141Z] [INFO   ] [STREAM] Skipping test for trigger Trigger on New Email
[2025-10-26T04:01:34.646Z] [INFO   ] [STREAM] Trigger complete, continuing to next node (loop iteration 0 of 1)
[2025-10-26T04:01:34.949Z] [INFO   ] [STREAM] Completed node 1 of 2, moving to next iteration
[2025-10-26T04:01:34.951Z] [INFO   ] [STREAM] Preparing Send Message to Slack (node-1761451285122-1)
[2025-10-26T04:01:35.754Z] [INFO   ] [STREAM] Starting configuration for Send Message to Slack (node-1761451285122-1)
[2025-10-26T04:01:36.256Z] [INFO   ] [STREAM] Calling generateNodeConfig for Send Message to Slack...
[2025-10-26T04:01:36.257Z] [INFO   ] [generateNodeConfig] Starting for node: Send Message to Slack
[2025-10-26T04:01:36.257Z] [INFO   ] [generateNodeConfig] nodeComponent: { type: 'slack_action_send_message', providerId: 'slack' }
[2025-10-26T04:01:36.257Z] [INFO   ] [generateNodeConfig] clarifications received: {}
[2025-10-26T04:01:36.257Z] [INFO   ] [generateNodeConfig] Extracted clarificationEntries: []
[2025-10-26T04:01:36.257Z] [INFO   ] [generateNodeConfig] messageTemplate: undefined
[2025-10-26T04:01:36.257Z] [INFO   ] [generateNodeConfig] Final clarificationContext: NONE
[2025-10-26T04:01:36.258Z] [INFO   ] [generateNodeConfig] Sending prompt to AI...
[2025-10-26T04:01:39.859Z] [INFO   ] [generateNodeConfig] AI returned result: {
  "success": true,
  "config": {
    "channel": "#general",
    "text": "New email received from {{trigger.email}} at {{trigger.timestamp}}. Please check it out!",
    "username": "Email Notifier",
    "icon_emoji": ":email:",
    "link_names": true
  },
  "reasoning": "The configuration sends a message to the '#general' channel, which is a common default channel in Slack. The message includes the sender's email and the timestamp of the email received, using variables from the previous node to provide context. The username 'Email Notifier' and the emoji icon ':email:' are set as sensible defaults to make the message more identifiable and engaging. The 'link_names' option is set to true to automatically convert any mentions in the message into clickable links."
}
[2025-10-26T04:01:39.859Z] [INFO   ] [generateNodeConfig] Config from AI: {
  "channel": "#general",
  "text": "New email received from {{trigger.email}} at {{trigger.timestamp}}. Please check it out!",
  "username": "Email Notifier",
  "icon_emoji": ":email:",
  "link_names": true
}
[2025-10-26T04:01:39.860Z] [INFO   ] [generateNodeConfig] Final config after force-apply: {
  "channel": "#general",
  "message": "New email received from {{trigger.email}} at {{trigger.timestamp}}. Please check it out!"
}
[2025-10-26T04:01:39.860Z] [INFO   ] [STREAM] generateNodeConfig completed in 3604ms for Send Message to Slack
[2025-10-26T04:01:39.861Z] [INFO   ] [STREAM] Config result: {
  success: true,
  hasConfig: true,
  configKeys: [ 'channel', 'message' ],
  finalConfigKeys: [ 'channel', 'message' ],
  fallbackFields: []
}
[2025-10-26T04:01:39.861Z] [INFO   ] [STREAM] Configuring 2 fields for Send Message to Slack: channel, message
[2025-10-26T04:01:39.861Z] [INFO   ] [STREAM] Setting field channel = #general for Send Message to Slack
[2025-10-26T04:01:40.165Z] [INFO   ] [STREAM] Setting field message = New email received from {{trigger.email}} at {{trigger.timestamp}}. Please check it out! for Send Message to Slack
[2025-10-26T04:01:48.675Z] [INFO   ] [STREAM] Completed node 2 of 2, moving to next iteration
[2025-10-26T04:01:48.676Z] [INFO   ] [STREAM] All nodes configured and tested, sending workflow_complete event
[2025-10-26T04:09:35.279Z] [INFO   ] 2025-10-26T04:09:35.278Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12885087879}
[2025-10-26T04:09:35.701Z] [INFO   ] 2025-10-26T04:09:35.700Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T04:09:35.710Z] [INFO   ] 2025-10-26T04:09:35.710Z [INFO] [NewWorkflowBuilderContent] URL params: {"aiChat":"true","hasInitialPrompt":true,"initialPrompt":"When I get an email send it to slack"}
[2025-10-26T04:09:37.073Z] [INFO   ] 2025-10-26T04:09:37.073Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T04:09:37.073Z","headers":{"referer":"check-console"}}
[2025-10-26T04:09:37.210Z] [INFO   ] 2025-10-26T04:09:37.210Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T04:09:37.312Z] [INFO   ] 2025-10-26T04:09:37.312Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}
[2025-10-26T04:09:38.183Z] [INFO   ] 2025-10-26T04:09:38.183Z [INFO] [ANALYZE] Analyzing user request: {"prompt":"When I get an email send it to slack","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T04:09:41.570Z] [INFO   ] 2025-10-26T04:09:41.570Z [INFO] [ANALYZE] Analysis complete: {"needsClarification":true,"questions":[{"id":"slack_channel","question":"Which Slack channel would you like to send messages to?","fieldType":"dropdown","dataEndpoint":"/api/integrations/slack/channels","nodeType":"slack_action_send_message","configField":"channel","required":true},{"id":"email_sender_filter","question":"Would you like to filter emails by sender? (Optional)","fieldType":"dropdown","dataEndpoint":"/api/integrations/gmail/senders","nodeType":"gmail_trigger_new_email","configField":"from","required":false,"allowCustom":true,"isMultiSelect":true,"tooltip":"Select one or more recent senders, or type custom email addresses. The workflow will trigger for emails from any of the selected senders."},{"id":"email_keywords_filter","question":"Would you like to filter emails by keywords? (Optional)","fieldType":"text","nodeType":"gmail_trigger_new_email","configField":"keywords","required":false,"tooltip":"Enter keywords to search for in both the subject and body of emails. Examples: 'invoice', 'urgent report', 'meeting'. Separate multiple keywords with commas to match any of them. The workflow will trigger when an email contains any of these keywords in either the subject or body."}],"inferredData":{"email_source":"gmail","reasoning":"User has only Gmail connected","message_template":"New email from {{trigger.from}}\n\nSubject: {{trigger.subject}}\n\nBody:\n{{trigger.body}}"}}
[2025-10-26T04:09:42.229Z] [INFO   ] 2025-10-26T04:09:42.228Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T04:09:42.593Z] [INFO   ] 2025-10-26T04:09:42.592Z [INFO] [SLACK CHANNELS] Fetched channels: {"count":3}
[2025-10-26T04:09:42.723Z] [INFO   ] 2025-10-26T04:09:42.723Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":13}
[2025-10-26T04:09:43.407Z] [INFO   ] 2025-10-26T04:09:43.407Z [INFO] [GMAIL SENDERS] Fetched senders: {"count":13}
[2025-10-26T04:09:47.095Z] [INFO   ] [Prerequisite Check] Required apps: [ 'gmail', 'slack' ]
[2025-10-26T04:09:47.095Z] [INFO   ] [Prerequisite Check] Connected integrations: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'dropbox',
  'google-drive',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T04:09:47.096Z] [INFO   ] [Prerequisite Check] Normalized connected: [
  'notion',
  'mailchimp',
  'gmail',
  'google-sheets',
  'facebook',
  'trello',
  'slack',
  'google-docs',
  'twitter',
  'dropbox',
  'google-drive',
  'google-calendar',
  'airtable',
  'google_calendar'
]
[2025-10-26T04:09:47.096Z] [INFO   ] [Prerequisite Check] Checking gmail (normalized: gmail): CONNECTED
[2025-10-26T04:09:47.096Z] [INFO   ] [Prerequisite Check] Checking slack (normalized: slack): CONNECTED
[2025-10-26T04:09:57.204Z] [INFO   ] [STREAM] Phase 2: Starting node creation, plan: {
  understanding: 'The user wants to automatically send received emails to a Slack channel.',
  nodes: [
  {
  type: 'gmail_trigger_new_email',
  title: 'Trigger on New Email',
  description: 'Triggers the workflow when a new email is received in Gmail.',
  reasoning: 'This node is essential to start the workflow whenever the user receives a new email.'
},
  {
  type: 'slack_action_send_message',
  title: 'Send Message to Slack',
  description: 'Sends a message to a specified Slack channel.',
  reasoning: 'This node is needed to send the content of the received email to the Slack channel.'
}
],
  connections: 'The workflow starts with the Gmail trigger node, which activates when a new email is received. This triggers the Slack action node to send the email content to a designated Slack channel.'
}
[2025-10-26T04:09:57.205Z] [INFO   ] [STREAM] Plan nodes: [
  {
  type: 'gmail_trigger_new_email',
  title: 'Trigger on New Email',
  description: 'Triggers the workflow when a new email is received in Gmail.',
  reasoning: 'This node is essential to start the workflow whenever the user receives a new email.'
},
  {
  type: 'slack_action_send_message',
  title: 'Send Message to Slack',
  description: 'Sends a message to a specified Slack channel.',
  reasoning: 'This node is needed to send the content of the received email to the Slack channel.'
}
]
[2025-10-26T04:09:57.205Z] [INFO   ] [POSITION] Node 0 : {
  viewport: { width: 1558, height: 1211, zoom: 0.75, chatPanelWidth: 1000 },
  effectiveViewportWidth: 3410.6666666666665,
  builderViewportWidth: 2077.3333333333335,
  visibleHeight: 1614.6666666666667,
  availableWidth: 1997.3333333333335,
  nodesPerRow: 3,
  row: 0,
  col: 0,
  position: { x: 813.6666666666667, y: 80 }
}
[2025-10-26T04:09:57.306Z] [INFO   ] [POSITION] Node 1 : {
  viewport: { width: 1558, height: 1211, zoom: 0.75, chatPanelWidth: 1000 },
  effectiveViewportWidth: 3410.6666666666665,
  builderViewportWidth: 2077.3333333333335,
  visibleHeight: 1614.6666666666667,
  availableWidth: 1997.3333333333335,
  nodesPerRow: 3,
  row: 0,
  col: 1,
  position: { x: 1103.6666666666667, y: 80 }
}
[2025-10-26T04:09:58.261Z] [INFO   ] [STREAM] Preparing Trigger on New Email (node-1761451797205-0)
[2025-10-26T04:09:59.062Z] [INFO   ] [STREAM] Starting configuration for Trigger on New Email (node-1761451797205-0)
[2025-10-26T04:09:59.565Z] [INFO   ] [STREAM] Calling generateNodeConfig for Trigger on New Email...
[2025-10-26T04:09:59.566Z] [INFO   ] [generateNodeConfig] Starting for node: Trigger on New Email
[2025-10-26T04:09:59.566Z] [INFO   ] [generateNodeConfig] nodeComponent: { type: 'gmail_trigger_new_email', providerId: 'gmail' }
[2025-10-26T04:09:59.566Z] [INFO   ] [generateNodeConfig] clarifications received: {}
[2025-10-26T04:09:59.566Z] [INFO   ] [generateNodeConfig] Extracted clarificationEntries: []
[2025-10-26T04:09:59.567Z] [INFO   ] [generateNodeConfig] messageTemplate: undefined
[2025-10-26T04:09:59.567Z] [INFO   ] [generateNodeConfig] Final clarificationContext: NONE
[2025-10-26T04:09:59.567Z] [INFO   ] [generateNodeConfig] Sending prompt to AI...
[2025-10-26T04:10:05.557Z] [INFO   ] [generateNodeConfig] AI returned result: {
  "success": true,
  "config": {
    "node_type": "gmail_trigger_new_email",
    "trigger": {
      "email": "{{trigger.email}}",
      "label_ids": [
        "INBOX"
      ],
      "include_spam_trash": false,
      "search_query": "is:unread"
    },
    "options": {
      "polling_interval": 5,
      "max_emails": 10
    }
  },
  "reasoning": "The configuration uses the variable {{trigger.email}} to dynamically capture the email address from the previous node, ensuring that the workflow is tailored to the specific user. The label_ids field is set to 'INBOX' to focus on new emails, while include_spam_trash is set to false to avoid processing unwanted emails. The search_query is set to 'is:unread' to trigger the workflow only for unread emails, aligning with the goal of continuing the workflow upon receiving new emails. The polling_interval is set to 5 minutes to balance responsiveness and resource usage, and max_emails is set to 10 to limit the number of emails processed in a single trigger event."
}
[2025-10-26T04:10:05.558Z] [INFO   ] [generateNodeConfig] Config from AI: {
  "node_type": "gmail_trigger_new_email",
  "trigger": {
    "email": "{{trigger.email}}",
    "label_ids": [
      "INBOX"
    ],
    "include_spam_trash": false,
    "search_query": "is:unread"
  },
  "options": {
    "polling_interval": 5,
    "max_emails": 10
  }
}
[2025-10-26T04:10:05.559Z] [INFO   ] [generateNodeConfig] Final config after force-apply: {
  "labelIds": [
    "INBOX"
  ]
}
[2025-10-26T04:10:05.559Z] [INFO   ] [STREAM] generateNodeConfig completed in 5993ms for Trigger on New Email
[2025-10-26T04:10:05.560Z] [INFO   ] [STREAM] Config result: {
  success: true,
  hasConfig: true,
  configKeys: [ 'labelIds' ],
  finalConfigKeys: [ 'labelIds' ],
  fallbackFields: []
}
[2025-10-26T04:10:05.560Z] [INFO   ] [STREAM] Configuring 1 fields for Trigger on New Email: labelIds
[2025-10-26T04:10:05.560Z] [INFO   ] [STREAM] Setting field labelIds = INBOX for Trigger on New Email
[2025-10-26T04:10:06.367Z] [INFO   ] [STREAM] Skipping test for trigger Trigger on New Email
[2025-10-26T04:10:07.870Z] [INFO   ] [STREAM] Trigger complete, continuing to next node (loop iteration 0 of 1)
[2025-10-26T04:10:08.172Z] [INFO   ] [STREAM] Completed node 1 of 2, moving to next iteration
[2025-10-26T04:10:08.172Z] [INFO   ] [STREAM] Preparing Send Message to Slack (node-1761451797305-1)
[2025-10-26T04:10:08.974Z] [INFO   ] [STREAM] Starting configuration for Send Message to Slack (node-1761451797305-1)
[2025-10-26T04:10:09.477Z] [INFO   ] [STREAM] Calling generateNodeConfig for Send Message to Slack...
[2025-10-26T04:10:09.478Z] [INFO   ] [generateNodeConfig] Starting for node: Send Message to Slack
[2025-10-26T04:10:09.478Z] [INFO   ] [generateNodeConfig] nodeComponent: { type: 'slack_action_send_message', providerId: 'slack' }
[2025-10-26T04:10:09.478Z] [INFO   ] [generateNodeConfig] clarifications received: {}
[2025-10-26T04:10:09.478Z] [INFO   ] [generateNodeConfig] Extracted clarificationEntries: []
[2025-10-26T04:10:09.479Z] [INFO   ] [generateNodeConfig] messageTemplate: undefined
[2025-10-26T04:10:09.479Z] [INFO   ] [generateNodeConfig] Final clarificationContext: NONE
[2025-10-26T04:10:09.479Z] [INFO   ] [generateNodeConfig] Sending prompt to AI...
[2025-10-26T04:10:39.484Z] [ERROR  ] 2025-10-26T04:10:39.484Z [ERROR] AI call failed: {}
[2025-10-26T04:10:39.485Z] [INFO   ] [generateNodeConfig] AI returned result: {
  "success": false,
  "error": "AI API request timed out after 30 seconds"
}
[2025-10-26T04:10:39.485Z] [INFO   ] [generateNodeConfig] Config from AI: undefined
[2025-10-26T04:10:39.485Z] [INFO   ] [generateNodeConfig] No config from AI, initializing empty config
[2025-10-26T04:10:39.485Z] [INFO   ] [generateNodeConfig] Final config after force-apply: {}
[2025-10-26T04:10:39.485Z] [INFO   ] [STREAM] generateNodeConfig completed in 30007ms for Send Message to Slack
[2025-10-26T04:10:39.485Z] [INFO   ] [STREAM] Config result: {
  success: false,
  hasConfig: true,
  configKeys: [],
  finalConfigKeys: [ 'message' ],
  fallbackFields: [ 'message' ]
}
[2025-10-26T04:10:39.485Z] [INFO   ] [STREAM] Configuring 1 fields for Send Message to Slack: message
[2025-10-26T04:10:39.485Z] [INFO   ] [STREAM] Setting field message =  for Send Message to Slack
[2025-10-26T04:10:48.330Z] [INFO   ] [STREAM] Completed node 2 of 2, moving to next iteration
[2025-10-26T04:10:48.332Z] [INFO   ] [STREAM] All nodes configured and tested, sending workflow_complete event
[2025-10-26T04:13:31.812Z] [INFO   ]  [32m[1m‚úì[22m[39m Compiled in 1426ms (1900 modules)
[2025-10-26T04:13:32.200Z] [INFO   ] 2025-10-26T04:13:32.200Z [DEBUG] [Middleware] Username check: {"path":"/workflows/builder/e657c1e0-d8a3-44a2-a77b-8ad980027693","userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","provider":"email","role":"free","username":"nstoddard17","hasUsername":true,"isBetaTester":false,"isNewBetaUser":false,"accountAge":12885324801}
[2025-10-26T04:13:32.309Z] [INFO   ] 2025-10-26T04:13:32.309Z [DEBUG] [Username Check] {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0","hasEmail":true,"provider":"email","hasUsername":true,"isGoogleUser":false}
[2025-10-26T04:13:33.893Z] [INFO   ] 2025-10-26T04:13:33.893Z [DEBUG] üìç [API /api/integrations] GET request received {"timestamp":"2025-10-26T04:13:33.893Z","headers":{"referer":"check-console"}}
[2025-10-26T04:13:33.999Z] [INFO   ] 2025-10-26T04:13:33.999Z [DEBUG] ‚úÖ [API /api/integrations] User authenticated {"userId":"a3e3a51a-175c-4b59-ad03-227ba12a18b0"}
[2025-10-26T04:13:34.085Z] [INFO   ] 2025-10-26T04:13:34.084Z [DEBUG] üìä [API /api/integrations] Query result {"count":14,"error":null,"firstFew":[{"provider":"notion","status":"connected"},{"provider":"mailchimp","status":"connected"}]}

=== Log Session Ended: 2025-10-26T04:14:05.188Z ===
