import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

// --- Configuration ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

const integrations = [
  { name: 'Gmail', url: 'https://upload.wikimedia.org/wikipedia/commons/7/7e/Gmail_icon_%282020%29.svg', filename: 'gmail.svg', category: 'Communication' },
  { name: 'Google Calendar', url: 'https://upload.wikimedia.org/wikipedia/commons/a/a5/Google_Calendar_icon_%282020%29.svg', filename: 'google-calendar.svg', category: 'Productivity' },
  { name: 'Google Drive', url: 'https://upload.wikimedia.org/wikipedia/commons/1/12/Google_Drive_icon_%282020%29.svg', filename: 'google-drive.svg', category: 'Storage' },
  { name: 'Google Sheets', url: 'https://upload.wikimedia.org/wikipedia/commons/3/30/Google_Sheets_logo_%282014-2020%29.svg', filename: 'google-sheets.svg', category: 'Productivity' },
  { name: 'YouTube', url: 'https://upload.wikimedia.org/wikipedia/commons/b/b8/YouTube_Logo_2017.svg', filename: 'youtube.svg', category: 'Social' },
  { name: 'Microsoft Teams', url: 'https://upload.wikimedia.org/wikipedia/commons/c/c9/Microsoft_Office_Teams_%282018%E2%80%93present%29.svg', filename: 'microsoft-teams.svg', category: 'Communication' },
  { name: 'OneDrive', url: 'https://upload.wikimedia.org/wikipedia/commons/3/3c/Microsoft_Office_OneDrive_%282019%E2%80%93present%29.svg', filename: 'onedrive.svg', category: 'Storage' },
  { name: 'Slack', url: 'https://upload.wikimedia.org/wikipedia/commons/d/d5/Slack_icon_2019.svg', filename: 'slack.svg', category: 'Communication' },
  { name: 'Discord', url: 'https://www.svgrepo.com/show/353655/discord-icon.svg', filename: 'discord.svg', category: 'Communication' },
];

const targetDir = path.join(projectRoot, 'public', 'integrations');
const configFilePath = path.join(projectRoot, 'lib', 'logos.ts');

// --- Main Function ---
async function main() {
  try {
    console.log('üöÄ Starting logo download script...');

    // 1. Delete existing files and recreate directory
    console.log(`üßπ Clearing and recreating directory: ${targetDir}`);
    await fs.rm(targetDir, { recursive: true, force: true });
    await fs.mkdir(targetDir, { recursive: true });

    // 2. Download and save all logos
    for (const integration of integrations) {
      console.log(`‚¨áÔ∏è  Downloading ${integration.name}...`);
      try {
        const response = await fetch(integration.url);
        if (!response.ok) {
          throw new Error(`Failed to fetch ${integration.url}: ${response.statusText}`);
        }
        const buffer = await response.arrayBuffer();
        const savePath = path.join(targetDir, integration.filename);
        await fs.writeFile(savePath, Buffer.from(buffer));
        console.log(`‚úÖ Saved ${integration.filename}`);
      } catch (error) {
        console.error(`‚ùå Error downloading ${integration.name}:`, error.message);
        // Continue to the next one
      }
    }

    // 3. (Bonus) Create logos.ts config file
    console.log(`üìù Creating logo config file at: ${configFilePath}`);
    const configContent = `
// This file is auto-generated by scripts/download-logos.mjs
export interface LogoConfig {
  name: string;
  path: string;
  category: string;
}

export const LOGO_CONFIG: Record<string, LogoConfig> = {
${integrations.map(int => `  '${int.filename.split('.')[0]}': {
    name: '${int.name}',
    path: '/integrations/${int.filename}',
    category: '${int.category}',
  },`).join('\n')}
};
`;
    await fs.writeFile(configFilePath, configContent.trim());
    console.log('‚úÖ Created logos.ts');

    console.log('\nüéâ Logo download and setup complete!');

  } catch (error) {
    console.error('\nüî• A critical error occurred:', error);
    process.exit(1);
  }
}

main(); 